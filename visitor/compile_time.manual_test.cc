/* <visitor/compile_time.manual_test.cc>

   Unit test for <visitor/visitor.h>

   This manual test is done to measure compile-time cost of the single and double visitors being generated by template magic.
   There are versions generated, one with manually writing out all of the pure virtual cases, and the one that instantiates a
   bunch of templates in order to accomplish the same goal in less lines of code. There is also a final visitor defined which
   derives from the manually written or template generated base visitor with virtual override functions. This final visitor is
   instantiated in the main function to enforce that the template instatiations definitely happen.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

#include <algorithm>
#include <fstream>
#include <vector>

#include <base/tmp_file.h>
#include <base/timer.h>
#include <starsha/runner.h>

#include <test/kit.h>

/* Temporary file used for files. */
static Base::TTmpFile File("compile_time_genXXXXXX.cc", true);

/* Needed for Starsha runner. */
bool PrintCmds = false;

/* Compiles and measures the average compile time over num_trials (default = 3). */
void Compile(const char *name, const char *filename, int num_trials = 3) {
  std::vector<double> trials(num_trials);
  for (int i = 0; i < num_trials; ++i) {
    Base::TTimer timer;
    std::ostringstream strm;
    strm << "g++ -std=c++11 -I" << SRC_ROOT << ' ' << filename;
    timer.Start();
    Starsha::TRunner runner(strm.str());
    auto status = runner.Wait();
    timer.Stop();
    if (!EXPECT_EQ(status, 0)) {
      runner.ForEachLine([](bool, const char * line) {
        std::cout << line << std::endl;
        return true;
      });
    }
    trials[i] = timer.Total();
  }
  std::cout << name <<  " took: " << std::accumulate(std::begin(trials), std::end(trials), 0.0) / num_trials << std::endl;
  unlink("a.out");  // Clean up.
}

/* Common parts of the genned file. */
void PrintHeader(std::ostream &strm) {
  strm
      << "#include <visitor/visitor.h>" << std::endl << std::endl
      << "#include <test/kit.h>" << std::endl << std::endl;
}

void PrintBase(std::ostream &strm) {
  strm << "/* Base class definition. */" << std::endl;
  strm
      << "class TBase {" << std::endl
      << "  public:" << std::endl << std::endl
      << "  class TVisitor;" << std::endl << std::endl
      << "};  // TBase" << std::endl << std::endl;
}

void PrintFinals(std::ostream &strm, int num_finals) {
  strm << "/* Final class definitions. */" << std::endl;
  for (int i = 0; i < num_finals; ++i) {
    strm << "class T" << i << " {};" << std::endl;
  }
  strm << std::endl;
}

/* Functions to help gen a single visitor pattern. */
namespace Single {

  void PrintAutoVisitor(std::ostream &strm, int num_finals) {
    strm << "/* Define TBase::TVisitor. */" << std::endl;
    strm << "class TBase::TVisitor : public Visitor::TVisitor<Visitor::Cptr, std::tuple<";
    for (int i = 0; i < num_finals; ++i) {
      if (i) {
        strm << ", ";
      }
      strm << "T" << i;
    }
    strm << ">> {};" << std::endl << std::endl;
  }

  void PrintManualVisitor(std::ostream &strm, int num_finals) {
    strm << "/* Define TAbstractVisitor. */" << std::endl;
    strm
      << "class TAbstractVisitor {" << std::endl
      << "  public:" << std::endl << std::endl;
    for (int i = 0; i < num_finals; ++i) {
      strm << "  virtual void operator()(const T" << i << " *) const = 0;" << std::endl;
    }
    strm << std::endl;
    strm
      << "};  // TAbstractVisitor" << std::endl << std::endl
      << "class TBase::TVisitor : public TAbstractVisitor {};" << std::endl << std::endl;
  }

  void PrintVisitor(std::ostream &strm, int num_finals) {
    strm << "/* Define TVisitor. */" << std::endl;
    strm
      << "class TVisitor : public TBase::TVisitor {" << std::endl
      << "  public:" << std::endl << std::endl;
    for (int i = 0; i < num_finals; ++i) {
      strm << "  virtual void operator()(const T" << i << " *) const override {}" << std::endl;
    }
    strm << std::endl;
    strm
      << "};  // TVisitor" << std::endl << std::endl;
  }

  void PrintMain(std::ostream &strm) {
    strm
        << "int main() {" << std::endl
        << "  TVisitor visitor;" << std::endl
        << '}' << std::endl;
  }

}  // Single

FIXTURE(Single) {
  int limit = 100;
  /* Manual */
  for (int num_finals = 10; num_finals <= limit; num_finals += 10) {
    std::cout << "For " << num_finals << " final classes." << std::endl;
    std::ofstream strm(File.GetName());
    PrintHeader(strm);
    PrintBase(strm);
    PrintFinals(strm, num_finals);
    Single::PrintManualVisitor(strm, num_finals);
    Single::PrintVisitor(strm, num_finals);
    Single::PrintMain(strm);
    Compile("Manual", File.GetName());
  }
  /* Auto */
  for (int num_finals = 10; num_finals <= limit; num_finals += 10) {
    std::cout << "For " << num_finals << " final classes." << std::endl;
    std::ofstream strm(File.GetName());
    PrintHeader(strm);
    PrintBase(strm);
    PrintFinals(strm, num_finals);
    Single::PrintAutoVisitor(strm, num_finals);
    Single::PrintVisitor(strm, num_finals);
    Single::PrintMain(strm);
    Compile("Auto", File.GetName());
  }
}

/* Functions to help gen double visitor. */
namespace Double {

  void PrintAutoVisitor(std::ostream &strm) {
    strm << "/* Define Double::TVisitor. */" << std::endl;
    strm
      << "namespace Double {" << std::endl << std::endl
      << "  using TVisitor = Visitor::Double::TVisitor<TBase::TVisitor, TBase::TVisitor>;" << std::endl << std::endl
      << "}  // Double" << std::endl << std::endl;
  }

  void PrintManualVisitor(std::ostream &strm, int num_finals) {
    strm << "/* Define Double::TVisitor. */" << std::endl;
    strm
      << "namespace Double {" << std::endl << std::endl
      << "  class TVisitor {" << std::endl << std::endl
      << "    public:" << std::endl << std::endl;
    for (int i = 0; i < num_finals; ++i) {
      for (int j = 0; j < num_finals; ++j) {
        strm << "    virtual void operator()(const T" << i << " *, const T" << j << " *) const = 0;" << std::endl;
      }
    }
    strm << std::endl;
    strm
      << "  };  // TVisitor" << std::endl << std::endl
      << "}  // Double" << std::endl << std::endl;
  }

  void PrintVisitor(std::ostream &strm, int num_finals) {
    strm << "/* Define DoubleVisitor. */" << std::endl;
    strm
      << "class TDoubleVisitor : public Double::TVisitor {" << std::endl
      << "  public:" << std::endl << std::endl;
    for (int i = 0; i < num_finals; ++i) {
      for (int j = 0; j < num_finals; ++j) {
        strm << "  virtual void operator()(const T" << i << " *, const T" << j << " *) const override {}" << std::endl;
      }
    }
    strm << std::endl;
    strm
      << "};  // TDoubleVisitor" << std::endl << std::endl;
  }

  void PrintMain(std::ostream &strm) {
    strm
        << "int main() {" << std::endl
        << "  TDoubleVisitor visitor;" << std::endl
        << '}' << std::endl;
  }

};

FIXTURE(Double) {
  int limit = 50;
  /* Manual */
  for (int num_finals = 10; num_finals <= limit; num_finals += 10) {
    std::cout << "For " << num_finals << " final classes." << std::endl;
    std::ofstream strm(File.GetName());
    PrintHeader(strm);
    PrintBase(strm);
    PrintFinals(strm, num_finals);
    Single::PrintManualVisitor(strm, num_finals);
    Double::PrintManualVisitor(strm, num_finals);
    Double::PrintVisitor(strm, num_finals);
    Double::PrintMain(strm);
    Compile("Manual", File.GetName());
  }
  /* Auto */
  for (int num_finals = 10; num_finals <= limit; num_finals += 10) {
    std::cout << "For " << num_finals << " final classes." << std::endl;
    std::ofstream strm(File.GetName());
    PrintHeader(strm);
    PrintBase(strm);
    PrintFinals(strm, num_finals);
    Single::PrintAutoVisitor(strm, num_finals);
    Double::PrintAutoVisitor(strm);
    Double::PrintVisitor(strm, num_finals);
    Double::PrintMain(strm);
    Compile("Auto", File.GetName(), 1);
  }
}
