/* <tools/nycr/nycr.nycr>

   Nycr grammar for nycr itself.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

assoc;
left_kwd     : assoc = 'left';
nonassoc_kwd : assoc = 'nonassoc';
right_kwd    : assoc = 'right';

empty_kwd = 'empty';
error_kwd = 'error';
prec_kwd  = 'prec';
pri_kwd   = 'pri';
rr_kwd    = 'rr';
sr_kwd    = 'sr';

arrow       = '"->"';
colon       = '":"';
close_angle = '">"';
eq          = '"="';
open_angle  = '"<"';
semi        = '";"';
slash       = '"/"';

int_literal = r'(\+|\-)?[[:digit:]]+';

str_literal;
single_quoted_str_literal     : str_literal = "{SINGLE_QUOTED_STRING}";
double_quoted_str_literal     : str_literal = "{DOUBLE_QUOTED_STRING}";
single_quoted_raw_str_literal : str_literal = "{SINGLE_QUOTED_RAW_STRING}" pri 1;
double_quoted_raw_str_literal : str_literal = "{DOUBLE_QUOTED_RAW_STRING}" pri 1;

name = "[a-zA-Z]+[a-zA-Z0-9_]*" pri 2;

decl;
opt_decl_seq;
no_decl_seq : opt_decl_seq -> empty;
decl_seq    : opt_decl_seq -> decl opt_decl_seq;

bad_decl : decl -> error semi;

prec_level : decl -> prec_kwd name semi;

opt_super;
no_super : opt_super -> empty;
super    : opt_super -> colon name;

member;
anonymous_member : member -> name;
named_member     : member -> name:name colon kind:name;
error_member     : member -> error_kwd;

opt_member_seq;
no_member_seq : opt_member_seq -> empty;
member_seq    : opt_member_seq -> member opt_member_seq;

opt_oper_ref;
no_oper_ref : opt_oper_ref -> empty;
oper_ref    : opt_oper_ref -> prec_kwd name;

opt_rhs;
no_rhs : opt_rhs -> arrow empty_kwd;
rhs    : opt_rhs -> arrow member_seq opt_oper_ref;

opt_path;
no_path : opt_path -> empty;
path    : opt_path -> name opt_path_tail;

opt_path_tail;
no_path_tail : opt_path_tail -> empty;
path_tail    : opt_path_tail -> slash path;

opt_expected_sr;
no_expected_sr : opt_expected_sr -> empty;
expected_sr    : opt_expected_sr -> sr_kwd int_literal;

opt_expected_rr;
no_expected_rr : opt_expected_rr -> empty;
expected_rr    : opt_expected_rr -> rr_kwd int_literal;

opt_pri_level;
no_pri_level : opt_pri_level -> empty;
pri_level    : opt_pri_level -> pri_kwd int_literal;

pattern -> eq str_literal opt_pri_level;

kind : decl;
base     : kind -> name opt_super semi;
language : kind -> name opt_super opt_rhs open_angle opt_path close_angle opt_expected_sr opt_expected_rr semi;
rule     : kind -> name opt_super opt_rhs semi;
keyword  : kind -> name opt_super pattern semi;
oper     : kind -> name opt_super pattern prec_level_ref:name assoc semi;

nycr -> opt_decl_seq <tools/nycr/syntax>;
