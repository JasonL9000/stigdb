/* <stig/rt/time_diff_obj.h>

   TODO

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

/* This file was auto-generated by the Stig compiler.

   We are using it because we needed to produce an object for TimeDiff code-gen that was
   basically what Stig would code-gen for itself.  */

#pragma once

#include <cassert>

#include <base/chrono.h>
#include <stig/rt/containers.h>
#include <stig/rt/obj.h>
#include <stig/type/obj.h>
#include <stig/type/int.h>
#include <stig/type/bool.h>
#include <stig/var/impl.h>
#include <stig/var/int.h>
#include <stig/var/bool.h>

namespace Stig {

  namespace Rt {

    namespace Objects {

      class TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second : public TObj {
        public:
        TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second() {}

	/* This is the only non-codegen part -- constructor so that we can use the TTimeDiffInfo class to
	   generate fields from a TimeDiff value (which is std::chrono::nanoseconds) */
        TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second(const std::chrono::nanoseconds &in) {
	  Base::Chrono::TTimeDiffInfo time_diff_obj(in);
	  Vday = time_diff_obj.getDay();
	  Vhour = time_diff_obj.getHour();
	  Vis_forward = time_diff_obj.getIsForward();
	  Vminute = time_diff_obj.getMinute();
	  Vnanosecond = time_diff_obj.getNanosecond();
	  Vsecond = time_diff_obj.getSecond();
	}

        TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second(const TDynamicMembers &m) : Vday(Sabot::AsNative<int64_t>(*Sabot::State::TAny::TWrapper(m.at("day").GetState(alloca(Sabot::State::GetMaxStateSize()))))), Vhour(Sabot::AsNative<int64_t>(*Sabot::State::TAny::TWrapper(m.at("hour").GetState(alloca(Sabot::State::GetMaxStateSize()))))), Vis_forward(Sabot::AsNative<bool>(*Sabot::State::TAny::TWrapper(m.at("is_forward").GetState(alloca(Sabot::State::GetMaxStateSize()))))), Vminute(Sabot::AsNative<int64_t>(*Sabot::State::TAny::TWrapper(m.at("minute").GetState(alloca(Sabot::State::GetMaxStateSize()))))), Vnanosecond(Sabot::AsNative<int64_t>(*Sabot::State::TAny::TWrapper(m.at("nanosecond").GetState(alloca(Sabot::State::GetMaxStateSize()))))), Vsecond(Sabot::AsNative<int64_t>(*Sabot::State::TAny::TWrapper(m.at("second").GetState(alloca(Sabot::State::GetMaxStateSize()))))) {}
        TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second(const int64_t &vvday, const int64_t &vvhour, const bool &vvis_forward, const int64_t &vvminute, const int64_t &vvnanosecond, const int64_t &vvsecond) : Vday(vvday), Vhour(vvhour), Vis_forward(vvis_forward), Vminute(vvminute), Vnanosecond(vvnanosecond), Vsecond(vvsecond) {}
        TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second(const TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &that) : Vday(that.Vday), Vhour(that.Vhour), Vis_forward(that.Vis_forward), Vminute(that.Vminute), Vnanosecond(that.Vnanosecond), Vsecond(that.Vsecond) {}

        #if 0
        Var::TVar AsVar() const final {
          assert(this);
          return Var::TVar::Obj(TDynamicMembers{{ "day", Var::TVar(Vday)}, { "hour", Var::TVar(Vhour)}, { "is_forward", Var::TVar(Vis_forward)}, { "minute", Var::TVar(Vminute)}, { "nanosecond", Var::TVar(Vnanosecond)}, { "second", Var::TVar(Vsecond)}});
        }
        #endif

        size_t GetHash() const {
          assert(this);
          return  std::hash<int64_t>()(Vday) ^ std::hash<int64_t>()(Vhour) ^ std::hash<bool>()(Vis_forward) ^ std::hash<int64_t>()(Vminute) ^ std::hash<int64_t>()(Vnanosecond) ^ std::hash<int64_t>()(Vsecond);
        }

        bool EqEq(const TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &that) const {
          assert(this);
          assert(&that);
          return Rt::And(Rt::EqEq(Vday, that.Vday), Rt::And(Rt::EqEq(Vhour, that.Vhour), Rt::And(Rt::EqEq(Vis_forward, that.Vis_forward), Rt::And(Rt::EqEq(Vminute, that.Vminute), Rt::And(Rt::EqEq(Vnanosecond, that.Vnanosecond), Rt::And(Rt::EqEq(Vsecond, that.Vsecond), true))))));
        }


        bool Match(const TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &that) const {
          assert(this);
          assert(&that);
          return Rt::Match(Vday, that.Vday) && Rt::Match(Vhour, that.Vhour) && Rt::Match(Vis_forward, that.Vis_forward) && Rt::Match(Vminute, that.Vminute) && Rt::Match(Vnanosecond, that.Vnanosecond) && Rt::Match(Vsecond, that.Vsecond);
        }

        bool Neq(const TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &that) const {
          assert(this);
          assert(&that);
          return Rt::Or(Rt::Neq(Vday, that.Vday), Rt::Or(Rt::Neq(Vhour, that.Vhour), Rt::Or(Rt::Neq(Vis_forward, that.Vis_forward), Rt::Or(Rt::Neq(Vminute, that.Vminute), Rt::Or(Rt::Neq(Vnanosecond, that.Vnanosecond), Rt::Or(Rt::Neq(Vsecond, that.Vsecond), false))))));
        }

        int64_t GetVday() const {
          assert(this);
          return Vday;
        }
        int64_t GetVhour() const {
          assert(this);
          return Vhour;
        }
        bool GetVis_forward() const {
          assert(this);
          return Vis_forward;
        }
        int64_t GetVminute() const {
          assert(this);
          return Vminute;
        }
        int64_t GetVnanosecond() const {
          assert(this);
          return Vnanosecond;
        }
        int64_t GetVsecond() const {
          assert(this);
          return Vsecond;
        }

        private:
        int64_t Vday;
        int64_t Vhour;
        bool Vis_forward;
        int64_t Vminute;
        int64_t Vnanosecond;
        int64_t Vsecond;
      }; // TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second

    } // Objects

    template <>
    struct EqEqStruct<Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second, Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second> {
      static bool Do(const Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &lhs, const Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &rhs) {
        return lhs.EqEq(rhs);
      }
    }; // EqEqStruct<Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second, Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second>

    template <>
    struct NeqStruct<Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second, Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second> {
      static bool Do(const Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &lhs, const Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &rhs) {
        return lhs.Neq(rhs);
      }
    }; // NeqStruct<Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second, Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second>

    template <>
    inline bool Match(const Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &lhs, const Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second &rhs) {
      return lhs.Match(rhs);
    }

  } // Stig

} // Rt

namespace Stig {

  namespace Type {

    template <>
    struct TDt<Rt::Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second> {

      static TType GetType() {
        return TObj::Get({{"day", Stig::Type::TInt::Get()}, {"hour", Stig::Type::TInt::Get()}, {"is_forward", Stig::Type::TBool::Get()}, {"minute", Stig::Type::TInt::Get()}, {"nanosecond", Stig::Type::TInt::Get()}, {"second", Stig::Type::TInt::Get()}});
      }

    };

  } // Stig

} // Type

namespace std {
  template<>
  struct hash<Stig::Rt::Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second> {

    typedef size_t return_type;
    typedef Stig::Rt::Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second argument_type;

    size_t operator()(const argument_type &obj) const {
      return  obj.GetHash();
    }

  }; // hash<Stig::Rt::Objects::TObjO6i3dayi4hourb10is_forwardi6minutei10nanosecondi6second>
} // std