/* <stig/stig.nycr>

   Nycr grammar for Stig checkpoint and package files.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

/* ------------------------------------------------------------------------------------------------------------------------------------------------
    TERMINAL TOKENS
   ------------------------------------------------------------------------------------------------------------------------------------------------ */

prec lowest_prec;
prec logical_or_prec;        /* logical 'or' */
prec logical_xor_prec;       /* logical 'xor' */
prec logical_and_prec;       /* logical 'and' */
prec equality_prec;          /* equal and not-equal */
prec inequality_prec;        /* less-than; less-than-or-equal; greater-than; greater-than-or-equal */
prec bitwise_or_prec;        /* bitwise 'or', set union */
prec bitwise_xor_prec;       /* bitwise 'xor', set symmetric difference */
prec bitwise_and_prec;       /* bitwise 'and', set intersection */
prec shift_and_rotate_prec;  /* bit shifts and rotations */
prec add_and_sub_prec;       /* addition and subtraction */
prec mul_and_div_prec;       /* multiplication, division, and modulo */
prec exponentiation_prec;    /* exponentiation */
prec unary_prec;             /* unary plus and minus; logical and bitwise negation */
prec func_and_member_prec;   /* function application; element and member access; constructed literals */
prec highest_prec;

ampersand         = '"&"' bitwise_and_prec left;
and_kwd           = '"and"' logical_and_prec left;
and_then_kwd      = '"and_then"' logical_and_prec left;
asc_kwd           = '"asc"';
as_kwd            = '"as"' equality_prec left;
assert_kwd        = '"assert"';
at_sign           = '"@"' unary_prec right;
bang              = '"!"' unary_prec left;
bar               = '"|"' bitwise_or_prec left;
bool_kwd          = '"bool"';
ceiling_kwd       = '"ceiling"';
close_addr        = '"]>"';
close_brace       = '"}"';
close_bracket     = '"]"';
close_obj         = '"}>"';
close_paren       = '")"';
collated_by_kwd   = '"collated_by"' lowest_prec left;
collected_by_kwd  = '"collected_by"' lowest_prec left;
colon             = '":"' lowest_prec left;
colons            = '"::"';
comma             = '","';
delete_kwd        = '"delete"';
desc_kwd          = '"desc"';
do_kwd            = '"do"'; /* TODO: Should this be 'apply'? */
dot               = '"."' func_and_member_prec left;
dots              = '".."';
effecting_kwd     = '"effecting"';
else_kwd          = '"else"';
else_if_kwd       = '"else_if"';
empty_kwd         = '"empty"' unary_prec right;
exists_kwd        = '"exists"';
floor_kwd         = '"floor"';
free_kwd          = '"free"';
from_kwd          = '"from"';
hat               = '"^"' bitwise_xor_prec left;
having_kwd        = '"having"' lowest_prec left;
eq                = '"="';
eq_eq             = '"=="' equality_prec left;
gt                = '">"' inequality_prec left;
gt_eq             = '">="' inequality_prec left;
hash_sign         = '"#"';
id_kwd            = '"id"';
if_kwd            = '"if"' lowest_prec left;
imports_kwd       = '"imports"';
in_kwd            = '"in"' equality_prec left;
int_kwd           = '"int"';
is_kwd            = '"is"' equality_prec left;
keys_kwd          = '"keys"' unary_prec right;
known_kwd         = '"known"';
given_kwd         = '"given"';
left_arrow        = '"<-"';
length_kwd        = '"length_of"';
lhs_kwd           = '"lhs"';
log_kwd           = '"log"';
log_2_kwd         = '"log2"';
log_10_kwd        = '"log10"';
lt                = '"<"' inequality_prec left;
lt_eq             = '"<="' inequality_prec left;
match_kwd         = '"match"' lowest_prec left;
minus             = '"-"' add_and_sub_prec left;
mutable_kwd       = '"mutable"' lowest_prec right;
neq               = '"!="' equality_prec left;
new_kwd           = '"new"';
not_kwd           = '"not"';
now_kwd           = '"now"';
or_kwd            = '"or"' logical_or_prec left;
or_else_kwd       = '"or_else"' logical_or_prec left;
open_addr         = '"<["';
open_brace        = '"{"';
open_bracket      = '"["' unary_prec nonassoc;
open_obj          = '"<{"';
open_paren        = '"("' func_and_member_prec left;
package_kwd       = '"package"';
percent           = '"%"' mul_and_div_prec left;
plus              = '"+"' add_and_sub_prec left;
question_mark     = '"?"' unary_prec left;
random_kwd        = '"random_int"';
real_kwd          = '"real"';
reduce_kwd        = '"reduce"' lowest_prec left;
replace_kwd       = '"replace"';
reverse_kwd       = '"reverse_of"';
rhs_kwd           = '"rhs"';
right_arrow       = '"->"' equality_prec left;
semi              = '";"';
session_id_kwd    = '"session_id"';
slash             = '"/"' mul_and_div_prec left;
sorted_by_kwd     = '"sorted_by"' lowest_prec left;
split_kwd         = '"split"' lowest_prec left;
star              = '"*"' mul_and_div_prec left;
stars             = '"**"' exponentiation_prec left;
start_kwd         = '"start"';
str_kwd           = '"str"';
take_kwd          = '"take"' lowest_prec left;
skip_kwd          = '"skip"' lowest_prec left;
that_kwd          = '"that"';
test_kwd          = '"test"';
time_diff_kwd     = '"time_diff"';
time_obj_kwd	  = '"time_obj"';
time_pnt_kwd      = '"time_pnt"';
to_lower_kwd      = '"to_lower"';
to_upper_kwd      = '"to_upper"';
unknown_kwd       = '"unknown"' unary_prec right;
user_id_kwd       = '"user_id"';
where_kwd         = '"where"';
while_kwd	  = '"while"' lowest_prec left;  /* like if */
with_kwd          = '"with"';
xor_kwd           = '"xor"' logical_xor_prec left;

unary_placeholder = '' unary_prec right;

literal;
id_literal   : literal = r'\{[[:xdigit:]]{8}\-([[:xdigit:]]{4}\-){3}[[:xdigit:]]{12}\}';
int_literal  : literal = '[[:digit:]]+';
real_literal : literal = r'[[:digit:]]+\.[[:digit:]]+([eE][\-\+]?[[:digit:]]+)?';

time_diff_literal : literal = r'\{[\-\+]?[[:digit:]]+T([[:digit:]]+\:){2}[[:digit:]]+(\.[[:digit:]]{1,9})?\}';
time_pnt_literal : literal = r'\{[[:digit:]]+(\-[[:digit:]]{1,2}){2}T([[:digit:]]{1,2}\:){2}[[:digit:]]{1,2}(\.[[:digit:]]{1,9})?(Z|([\-\+][[:digit:]]{1,2}\:[[:digit:]]{1,2}))\}';

str_literal : literal;
double_quoted_raw_str_literal : str_literal = '{DOUBLE_QUOTED_RAW_STRING}' pri 1;
double_quoted_str_literal     : str_literal = '{DOUBLE_QUOTED_STRING}';
single_quoted_raw_str_literal : str_literal = '{SINGLE_QUOTED_RAW_STRING}' pri 1;
single_quoted_str_literal     : str_literal = '{SINGLE_QUOTED_STRING}';

bool_literal : literal;
false_kwd : bool_literal = '"false"';
true_kwd  : bool_literal = '"true"';

opt_name;
no_name : opt_name -> empty;
name    : opt_name = '[_a-zA-Z][_a-zA-Z0-9]*' pri 2;


/* ------------------------------------------------------------------------------------------------------------------------------------------------
    COMMAND
   ------------------------------------------------------------------------------------------------------------------------------------------------ */
command -> expr <stig/command/syntax> sr 1;

/* ------------------------------------------------------------------------------------------------------------------------------------------------
    CHECKPOINTS
   ------------------------------------------------------------------------------------------------------------------------------------------------ */

checkpoint -> opt_checkpoint_stmt_seq <stig/checkpoint/syntax> sr 1;

opt_checkpoint_stmt_seq;
no_checkpoint_stmt_seq : opt_checkpoint_stmt_seq -> empty;
checkpoint_stmt_seq    : opt_checkpoint_stmt_seq -> opt_checkpoint_stmt_seq checkpoint_stmt;

checkpoint_stmt;
bad_checkpoint_stmt : checkpoint_stmt -> error semi;
installed_package   : checkpoint_stmt -> imports_kwd package_name semi;
kv_entry            : checkpoint_stmt -> id_literal key:expr left_arrow value:expr semi;

package_name -> lt package_name_member_list gt package_version;

  package_name_member_list -> name opt_package_name_member_list_tail;

  opt_package_name_member_list_tail;
  no_package_name_member_list_tail : opt_package_name_member_list_tail -> empty;
  package_name_member_list_tail    : opt_package_name_member_list_tail -> slash package_name_member_list;

  /* TODO (cody): For now version is required, since it is easier to implement.
    opt_package_version;
    no_package_version : opt_package_version -> empty;
    package_version    : opt_package_version -> hash_sign int_literal;
  */
  package_version -> hash_sign int_literal;

/* ------------------------------------------------------------------------------------------------------------------------------------------------
    PACKAGES
   ------------------------------------------------------------------------------------------------------------------------------------------------ */

package -> opt_def_seq <stig/package/syntax> sr 1;

opt_def_seq;
no_def_seq : opt_def_seq -> empty;
def_seq    : opt_def_seq -> def opt_def_seq;

def;
bad_def       : def -> error semi;
func_def      : def -> name eq expr semi;                                    /* foo = 10; */
generator_def : def -> name in_kwd expr semi;                                /* foo in [ 0 .. 10 ); */
import_def    : def -> name is_kwd type opt_name from_kwd package_ref semi;  /* foo is int bar from bar_package; */
package_def   : def -> name is_kwd package_kwd package_name semi;            /* foo is package <a/b/c> #14; */
test_def      : def -> opt_with_clause test_kwd test_case_block semi;        /* with { ...starting state... } test { ...condition... { ...subsequent condition... } }; */
type_def      : def -> name is_kwd type semi;                                /* foo is [ int ]; */

  package_ref;
  alias_package_ref   : package_ref -> name;
  literal_package_ref : package_ref -> package_kwd package_name;

top_level_def : def;
installer_def   : top_level_def -> package_kwd package_version opt_expr semi;           /* package #10 ...; */
uninstaller_def : top_level_def -> not_kwd package_kwd opt_expr semi;                   /* not package ...; */
upgrader_def    : top_level_def -> package_kwd from_kwd package_version opt_expr semi;  /* package from #9 ...; */

  opt_with_clause;
  no_with_clause : opt_with_clause -> empty;
  with_clause    : opt_with_clause -> with_kwd open_brace opt_test_kv_entry_seq close_brace;

    opt_test_kv_entry_seq;
    no_test_kv_entry_seq : opt_test_kv_entry_seq -> empty;
    test_kv_entry_seq    : opt_test_kv_entry_seq -> test_kv_entry opt_test_kv_entry_seq;

    test_kv_entry -> key:expr left_arrow value:expr semi;

  opt_test_case_block;
  no_test_case_block : opt_test_case_block -> empty;
  test_case_block    : opt_test_case_block -> open_brace test_case_seq close_brace;

    opt_test_case_seq;
    no_test_case_seq : opt_test_case_seq -> empty;
    test_case_seq    : opt_test_case_seq -> test_case opt_test_case_seq;

    test_case;
    bad_test_case  : test_case -> error semi;
    labeled_test_case   : test_case -> name colon expr opt_test_case_block semi;
    unlabeled_test_case : test_case -> expr opt_test_case_block semi;


/* ------------------------------------------------------------------------------------------------------------------------------------------------
    TYPE
   ------------------------------------------------------------------------------------------------------------------------------------------------ */

type;
paren_type : type -> open_paren type close_paren;
ref_type   : type -> name;

atomic_type : type;
bool_type      : atomic_type -> bool_kwd;       /* bool */
id_type        : atomic_type -> id_kwd;         /* id */
int_type       : atomic_type -> int_kwd;        /* int */
real_type      : atomic_type -> real_kwd;       /* real */
str_type       : atomic_type -> str_kwd;        /* str */
time_diff_type : atomic_type -> time_diff_kwd;  /* time_diff */
time_pnt_type  : atomic_type -> time_pnt_kwd;   /* time_pnt */

parametric_type : type;
/* NOTE: It would be nice to move the @ foobar to __after__ the stored type specification. */
mutable_type : parametric_type -> mutable_kwd opt_mutable_type_at type; /* mutable [@ <[str, int]>] int */

opt_mutable_type_at;
no_mutable_type_at : opt_mutable_type_at -> empty;
mutable_type_at : opt_mutable_type_at -> at_sign type;

mixfix_type : parametric_type;
dict_type  : mixfix_type -> open_brace key:type colon value:type close_brace;  /* { key_type : val_type } */
list_type  : mixfix_type -> open_bracket type close_bracket;                   /* [ type ] */
set_type   : mixfix_type -> open_brace type close_brace;                       /* { type } */

postfix_type : parametric_type;
err_type  : postfix_type -> type bang          prec unary_placeholder;  /* type! */
opt_type  : postfix_type -> type question_mark prec unary_placeholder;  /* type? */
seq_type  : postfix_type -> type star          prec unary_placeholder;  /* type* */

compound_type : type;
addr_type : compound_type -> open_addr opt_addr_type_member_list close_addr;   /* <[ asc|dec type, asc|desc type, ... ]> */

  opt_addr_type_member_list;
  no_addr_type_member_list : opt_addr_type_member_list -> empty;
  addr_type_member_list : opt_addr_type_member_list    -> addr_type_member opt_addr_type_member_list_tail;

  opt_addr_type_member_list_tail;
  no_addr_type_member_list_tail : opt_addr_type_member_list_tail -> empty;
  addr_type_member_list_tail    : opt_addr_type_member_list_tail -> comma addr_type_member_list;

  addr_type_member -> opt_ordering type;

obj_type : compound_type -> open_obj opt_obj_type_member_list close_obj;  /* <{ .name : type, .name : type, ... }> */

  opt_obj_type_member_list;
  no_obj_type_member_list : opt_obj_type_member_list -> empty;
  obj_type_member_list    : opt_obj_type_member_list -> obj_type_member opt_obj_type_member_list_tail;

  opt_obj_type_member_list_tail;
  no_obj_type_member_list_tail : opt_obj_type_member_list_tail -> empty;
  obj_type_member_list_tail    : opt_obj_type_member_list_tail -> comma obj_type_member_list;

  obj_type_member -> dot name colon type;

func_type : type -> params:obj_type right_arrow result:type;

/* ------------------------------------------------------------------------------------------------------------------------------------------------
    EXPRESSIONS
   ------------------------------------------------------------------------------------------------------------------------------------------------ */

/* NOTE: expr doesn't inherit from opt_expr because then the opt expr visitor would visit all the leaf exprs, which we don't want. */
opt_expr;
no_expr : opt_expr -> empty;
an_expr : opt_expr -> expr;

expr;
literal_expr    : expr -> literal;
paren_expr      : expr -> open_paren expr close_paren;
ref_expr        : expr -> name;
that_expr       : expr -> that_kwd;
lhs_expr        : expr -> lhs_kwd;
rhs_expr        : expr -> rhs_kwd;
user_id_expr    : expr -> user_id_kwd;
session_id_expr : expr -> session_id_kwd;
now_expr        : expr -> now_kwd;

ctor : expr;
list_ctor : ctor -> open_bracket expr_list close_bracket;  /* [ expr, expr, ... ] */
set_ctor  : ctor -> open_brace expr_list close_brace;      /* { expr, expr, ... } */

  expr_list -> expr opt_expr_list_tail;

  opt_expr_list_tail;
  no_expr_list_tail : opt_expr_list_tail -> empty;
  expr_list_tail    : opt_expr_list_tail -> comma expr_list;

dict_ctor : ctor -> open_brace dict_member_list close_brace;  /* { key_expr : val_expr, key_expr : val_expr, ... } */

  dict_member_list -> dict_member opt_dict_member_list_tail;

  opt_dict_member_list_tail;
  no_dict_member_list_tail : opt_dict_member_list_tail -> empty;
  dict_member_list_tail    : opt_dict_member_list_tail -> comma dict_member_list;

  dict_member -> key:expr colon value:expr;

addr_ctor : ctor -> open_addr opt_addr_member_list close_addr;  /* <[ asc|desc expr, asc|desc expr, ... ]> */

  opt_addr_member_list;
  no_addr_member_list : opt_addr_member_list -> empty;
  addr_member_list    : opt_addr_member_list -> addr_member opt_addr_member_list_tail;

  opt_addr_member_list_tail;
  no_addr_member_list_tail : opt_addr_member_list_tail -> empty;
  addr_member_list_tail    : opt_addr_member_list_tail -> comma addr_member_list;

  addr_member -> opt_ordering expr;

  opt_ordering;
  no_ordering   : opt_ordering -> empty;
  asc_ordering  : opt_ordering -> asc_kwd;
  desc_ordering : opt_ordering -> desc_kwd;

obj_ctor : ctor -> open_obj opt_obj_member_list close_obj;  /* <{ .name : expr, .name : expr, ... }> */

  opt_obj_member_list;
  no_obj_member_list : opt_obj_member_list -> empty;
  obj_member_list    : opt_obj_member_list -> obj_member opt_obj_member_list_tail;

  opt_obj_member_list_tail;
  no_obj_member_list_tail : opt_obj_member_list_tail -> empty;
  obj_member_list_tail    : opt_obj_member_list_tail -> comma obj_member_list;

  obj_member -> dot name colon expr;

range_ctor : ctor -> open_bracket expr opt_range_stride dots range_end;  /* [0 .. 9], [0 .. 10), [0, 2, .. 10), [0, -1, .. -10), [0..) */

  opt_range_stride;
  no_range_stride : opt_range_stride -> empty;
  range_stride    : opt_range_stride -> comma expr;

  range_end;
  closed_range_end    : range_end -> expr close_bracket;
  open_range_end      : range_end -> expr close_paren;
  undefined_range_end : range_end -> close_paren;

empty_ctor : ctor -> empty_kwd type;

unknown_ctor : ctor -> unknown_kwd type;

affix_expr : expr;

prefix_expr : affix_expr;
prefix_minus        : prefix_expr -> minus       expr prec unary_placeholder;
prefix_plus         : prefix_expr -> plus        expr prec unary_placeholder;
prefix_logical_not  : prefix_expr -> not_kwd     expr prec unary_placeholder;
prefix_start        : prefix_expr -> start_kwd   expr prec unary_placeholder;
prefix_known        : prefix_expr -> known_kwd   expr prec unary_placeholder;
prefix_exists       : prefix_expr -> exists_kwd  open_paren type close_paren at_sign expr prec unary_placeholder;
prefix_sequence     : prefix_expr -> stars       expr prec unary_placeholder;
prefix_length_of    : prefix_expr -> length_kwd  expr prec unary_placeholder;
prefix_reverse_of   : prefix_expr -> reverse_kwd expr prec unary_placeholder;
prefix_addr_of      : prefix_expr -> ampersand   expr prec unary_placeholder;
prefix_time_obj     : prefix_expr -> time_obj_kwd  expr prec unary_placeholder;

infix_expr : expr;
infix_div         : infix_expr -> lhs:expr slash rhs:expr;         /* division */
infix_exp         : infix_expr -> lhs:expr stars rhs:expr;         /* expontiation */
infix_minus       : infix_expr -> lhs:expr minus rhs:expr;         /* subtraction, asymmetric difference of sets, remove keys (on right) from dict (on left) */
infix_mod         : infix_expr -> lhs:expr percent rhs:expr;       /* modulo, string formatting */
infix_mul         : infix_expr -> lhs:expr star rhs:expr;          /* multiplication, string or sequence repeat */
infix_plus        : infix_expr -> lhs:expr plus rhs:expr;          /* addition, append to list, add dict to dict */
infix_eq          : infix_expr -> lhs:expr eq_eq rhs:expr;         /* equal to */
infix_neq         : infix_expr -> lhs:expr neq rhs:expr;           /* not equal to */
infix_lt          : infix_expr -> lhs:expr lt rhs:expr;            /* less-than, is proper subset of */
infix_lt_eq       : infix_expr -> lhs:expr lt_eq rhs:expr;         /* less-than-or-equal, is subset of */
infix_gt          : infix_expr -> lhs:expr gt rhs:expr;            /* greater-than, is proper superset of */
infix_gt_eq       : infix_expr -> lhs:expr gt_eq rhs:expr;         /* greater-than-or-equal, is superset of */
infix_logical_and : infix_expr -> lhs:expr and_kwd rhs:expr;       /* logical conjunction */
infix_and_then    : infix_expr -> lhs:expr and_then_kwd rhs:expr;  /* logical conjunction with short-circuit evaluation*/
infix_logical_or  : infix_expr -> lhs:expr or_kwd rhs:expr;        /* inclusive logical disjunction */
infix_or_else     : infix_expr -> lhs:expr or_else_kwd rhs:expr;   /* inclusive logical disjunction with short-circuit evaluation */
infix_logical_xor : infix_expr -> lhs:expr xor_kwd rhs:expr;       /* exclusive logical disjunction */
infix_bitwise_and : infix_expr -> lhs:expr ampersand rhs:expr;     /* bitwise and, intersection of sets */
infix_bitwise_or  : infix_expr -> lhs:expr bar rhs:expr;           /* bitwise or, union of sets */
infix_bitwise_xor : infix_expr -> lhs:expr hat rhs:expr;           /* bitwise xor, symmetric difference of sets */
infix_in          : infix_expr -> lhs:expr in_kwd rhs:expr;        /* test for presence in a container */
infix_match       : infix_expr -> lhs:expr match_kwd rhs:expr;     /* return all matches in a string of a regular expression */
infix_reduce      : infix_expr -> lhs:expr reduce_kwd rhs:expr;    /* reduce squence (on left) with reducer expression (on right) */
infix_sort        : infix_expr -> lhs:expr sorted_by_kwd rhs:expr; /* sort list (on left) with predicate expression (on right) */
infix_filter      : infix_expr -> lhs:expr if_kwd rhs:expr;      /* filter sequence (on left) with predicate expression (on right) */
infix_take        : infix_expr -> lhs:expr take_kwd rhs:expr;      /* take n elements of a sequence */
infix_skip        : infix_expr -> lhs:expr skip_kwd rhs:expr;      /* skip n elements of a sequence */
infix_split       : infix_expr -> lhs:expr split_kwd rhs:expr;     /* split a string based on a regular expression */
infix_while	  : infix_expr -> lhs:expr while_kwd rhs:expr;     /* take elements from a sequence while some expr is true */

postfix_expr : affix_expr;
postfix_obj_member  : postfix_expr -> expr dot name;                              /* member of obj */
postfix_addr_member : postfix_expr -> expr dot int_literal;                       /* member of addr */
postfix_is_known_expr : postfix_expr -> lhs:expr is_kwd is_known rhs:expr;        /* test if value is known to be a specific value */
postfix_is_known    : postfix_expr -> expr is_kwd is_known;                 	  /* test if value is known */

  is_known -> known_kwd prec unary_placeholder;

postfix_is_unknown  : postfix_expr -> expr is_kwd unknown_kwd;                    /* test if value is unknown */
postfix_is_empty    : postfix_expr -> expr is_kwd empty_kwd;                      /* test if container or string is empty */
postfix_cast        : postfix_expr -> expr as_kwd type;                           /* cast to new type */
postfix_call        : postfix_expr -> expr open_paren opt_call_args close_paren;  /* call built-in or user-specifed function */
postfix_slice       : postfix_expr -> expr open_bracket slice close_bracket;      /* slicing a list or looking up in a dict */
postfix_opt_checkpoint : postfix_expr -> expr question_mark;                      /* "a"? for use in checkpoints when it is important to keep the type as optional. */

  built_in_func : expr;
  time_diff_ctor   : built_in_func -> time_diff_kwd;
  time_pnt_ctor    : built_in_func -> time_pnt_kwd;
  built_in_ceiling : built_in_func -> ceiling_kwd open_paren expr close_paren;
  built_in_floor   : built_in_func -> floor_kwd open_paren expr close_paren;
  built_in_log     : built_in_func -> log_kwd open_paren expr close_paren;
  built_in_log_2   : built_in_func -> log_2_kwd open_paren expr close_paren;
  built_in_log_10  : built_in_func -> log_10_kwd open_paren expr close_paren;
  built_in_replace : built_in_func -> replace_kwd;
  built_in_to_upper: built_in_func -> to_upper_kwd open_paren expr close_paren;
  built_in_to_lower: built_in_func -> to_lower_kwd open_paren expr close_paren;
  built_in_random : built_in_func -> random_kwd;

  slice;
  single_slice     : slice -> expr;
  slice_to_end     : slice -> expr colon;
  slice_from_start : slice -> colon expr;
  slice_between    : slice -> start:expr colon limit:expr;

  opt_call_args;
  no_call_args       : opt_call_args -> empty;
  unrolled_call_args : opt_call_args -> star expr;
  explicit_call_args : opt_call_args -> obj_member_list;

extern_expr : expr;
given_expr : extern_expr -> given_kwd colons open_paren type close_paren;
read_expr  : extern_expr -> star expr colons open_paren type close_paren;

  opt_default_value;
  no_default_value : opt_default_value -> empty;
  default_value    : opt_default_value -> or_kwd expr;

if_expr : expr -> open_paren true_case:expr if_kwd predicate:expr else_kwd false_case:expr close_paren;

where_expr : expr -> open_paren expr close_paren where_kwd open_brace opt_def_seq close_brace;

assert_expr : expr -> open_paren expr close_paren assert_kwd open_brace opt_assertion_seq close_brace;

  opt_assertion_seq;
  no_assertion_seq : opt_assertion_seq -> empty;
  assertion_seq    : opt_assertion_seq -> assertion opt_assertion_seq;

  assertion;
  bad_assertion       : assertion -> error semi;
  labeled_assertion   : assertion -> name colon expr semi;
  unlabeled_assertion : assertion -> expr semi;

effecting_expr : expr -> open_paren expr close_paren effecting_kwd stmt_block;

db_keys_expr : expr -> keys_kwd open_paren type close_paren at_sign open_addr opt_db_keys_member_list close_addr;

  opt_db_keys_member_list;
  no_db_keys_member_list : opt_db_keys_member_list -> empty;
  db_keys_member_list    : opt_db_keys_member_list -> db_keys_member opt_db_keys_member_list_tail;

  opt_db_keys_member_list_tail;
  no_db_keys_member_list_tail : opt_db_keys_member_list_tail -> empty;
  db_keys_member_list_tail    : opt_db_keys_member_list_tail -> comma db_keys_member_list;

  db_keys_member;
  fixed_db_keys_member : db_keys_member -> opt_ordering expr;
  free_db_keys_member  : db_keys_member -> opt_ordering free_kwd colons open_paren type close_paren;

collated_by_expr : expr -> seq:expr collated_by_kwd reduce:expr having_kwd having:expr;

collected_by_expr : expr -> seq:expr collected_by_kwd collect:expr;

/* ------------------------------------------------------------------------------------------------------------------------------------------------
    STATEMENTS
   ------------------------------------------------------------------------------------------------------------------------------------------------ */

stmt_block -> open_brace opt_stmt_seq close_brace;

  opt_stmt_seq;
  no_stmt_seq : opt_stmt_seq -> empty;
  stmt_seq    : opt_stmt_seq -> stmt opt_stmt_seq;

stmt;
bad_stmt : stmt -> error semi;
if_stmt : stmt -> if_kwd expr stmt_block opt_else_if_clause_seq opt_else_clause;

  opt_else_if_clause_seq;
  no_else_if_clause_seq : opt_else_if_clause_seq -> empty;
  else_if_clause_seq    : opt_else_if_clause_seq -> else_if_clause opt_else_if_clause_seq;

  else_if_clause -> else_if_kwd expr stmt_block;

  opt_else_clause;
  no_else_clause : opt_else_clause -> empty;
  else_clause    : opt_else_clause -> else_kwd stmt_block;

new_stmt    : stmt -> new_kwd lhs:expr left_arrow rhs:expr semi;
delete_stmt : stmt -> delete_kwd open_paren type close_paren at_sign expr semi;
mutate_stmt : stmt -> lhs:expr mutation rhs:expr semi;

  mutation;
  mutation_assign      : mutation -> left_arrow;
  mutation_div         : mutation -> slash eq;
  mutation_exp         : mutation -> stars eq;
  mutation_minus       : mutation -> minus eq;
  mutation_mod         : mutation -> percent eq;
  mutation_mul         : mutation -> star eq;
  mutation_plus        : mutation -> plus eq;
  mutation_logical_and : mutation -> and_kwd eq;
  mutation_logical_or  : mutation -> or_kwd eq;
  mutation_logical_xor : mutation -> xor_kwd eq;
  mutation_bitwise_and : mutation -> ampersand eq;
  mutation_bitwise_or  : mutation -> bar eq;
  mutation_bitwise_xor : mutation -> hat eq;

/* ------------------------------------------------------------------------------------------------------------------------------------------------
    TODO

    * SWITCH AND SWITCHABLES

      This is a fairly deep subject and involves adding overloaded construction to objects.  There are lots of implications so
      for now, I'm just going to skip it.

    * ACCESS TO HISTORIES

        old_expr : expr -> old_kwd type from_kwd expr;  // x = old int at <[ 'a', 'b', 'c' ]>;

      This is the expression for accessing 'old' (that is, previous) values for a database key.
      In this form, it accesses the value immediately before the current one.  We may need additional
      syntax to refer to yet older values.

      This is unimplemented due to some design issues, such as:
         * What if the old value has already been cleaned up?  Or if the current value is the only value?
         * How do we tell the history-eater not to clean up certain keys?

      These issues should be addressed and reasonable answers found because access to data history is
      a great feature.  It's something to distinguish Stig from other databases and it makes some
      kinds of analysis (such as how graphs change over time) much more doable.

    * THROW AND CATCH

        prefix_throw : prefix_expr -> throw_kwd expr prec unary_placeholder;  // throw 'oops!';

        try_expr : expr -> try_kwd expr open_brace opt_case_seq close_brace;  // try f() { case str: that; case int: that as str; case else: 'bad'; }

        void_type : type -> void_kwd;  // 'void'

      The 'throw' expression bypases normal evaluation and raises an exception instead.  The 'throw' expression has the type 'void'.

      The 'void' type is really an absence of type.  No operation is permitted on it.  If one path of an 'if' expression results in void, then the
      type of the 'if' must be determined by the other path.  If both paths are void, then the 'if' is also void.

      A thrown value propagates upward in the call stack until it reaches a 'try' expression.  A 'try' is syntactically similar to a 'switch'.
      Control switches to the case which matches the type which was thrown.  Within the 'case', 'that' is bound to the thrown value.  In the
      'case else' (if any), there is no 'that'.  If a 'try' has no match for the type thrown (and has no 'case else'), then the thrown value will
      propagate past the 'try'.

      If a thrown value escapes the top-level expression, it becomes a 500-series error returned to the HTTP client.

    * EVALUATED TYPES

        params_of_kwd     = '"params_of"' unary_prec right;
        result_of_kwd     = '"result_of"' unary_prec right;
        type_of_kwd       = '"type_of"' unary_prec right;

        evaluated_type : type;
        type_of   : evaluated_type -> type_of_kwd expr;
        params_of : evaluated_type -> params_of_kwd expr;
        result_of : evaluated_type -> result_of_kwd expr;

      Evaluating these causes problems with the monotonic build model, so we'll do them later.
   ------------------------------------------------------------------------------------------------------------------------------------------------ */
