# Copyright 2010-2014 Stig LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

TSymbolTable
  std::unordered_map<string, std::shared_ptr<TSymbolDef>>; //Name -> TDefSymbol
  TSymbolTable *Parent;
  TryFindNearestDef(name);

# Symbol Maturation
#  Stub symbols are the starting state. Basically a stub just binds an expression to the closest
#  symbol table. We only bind stubs to identifiers/keywords that need scope attached to them.

# Def Symbols
#  Once we start building out a symbol, we make a def symbol for it.
#  Once we start building out symbols, we can build a TDefSymbol as a holder for temporary contents.
#  When we are done with a symbol, and have a symbolic for it, we create a TFinalSymbol.

# A symbol has appeared. Entered in the symbol table.
class TStubSymbol : public TSymbol;
  TSymbolTable *Scope;
  TLexeme *Lexeme;

# We have a definition of the symbol.
class TDefSymbol : public TSymbol
  TType *Type; //What is the memory for this?
  TCst* Definition;
  std::shared_ptr<TFinalSymbol> Final;

# We have a full symbolic. Seperate from definition because of expressions, for instance
class TFinalSymbol : public TSymbol
  std::shared_ptr<TDefSymbol> Def;

class TGenericFinalSymbol : public TFinalSymbol
  TExpr *Expr;

class TWhereSymbol : public TDefSymbol
  TSymbolTable Symbols;
  TParameters Parameters;


# Map from CST nodes. To build final symbolics, simply iterate over the defs in the CST
# and get out the TFinalSymbol for each.
class TProgram : public TSymbol {
  TMap<TCst*, shared_ptr<TSymbol>>
  shared_ptr<TSymbol> GetSymbol(TCst*);
  shared_ptr<TSymbol> SetSymbol(TCst*);
  Upgrade(TCst*, shared_ptr<TSymbol>); //Stub -> Def -> Final ONLY. Always forward.
  TSymbolTable Symbols;
}