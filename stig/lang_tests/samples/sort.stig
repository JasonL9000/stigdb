/* <stig/lang_tests/samples/sort.stig>
    intended to be run.  This is more to show what the recursive merge_sort code would
    look like in Stigscript (for those of you who enjoyed implementing it in Algorithms class.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

package #1;

merge = ((a if b is empty else
         (b if a is empty else
         ([a[0]] + merge (.a: a[1:], .b: b) if a[0] < b[0] else
         ([b[0]] + merge (.a: a, .b: b[1:]) as [int])))))
where {
  a = given::([int]);
  b = given::([int]);
};

mid = (length_of list / 2)where {
  list = given::([int]);
};

merge_sort = ((list if length_of list <= 1 else
               merge(.a : merge_sort(.list: list[0: mid(.list: list)]) as [int],
                     .b : merge_sort(.list: list[mid(.list: list):]) as [int])))
where {
  list = given::([int]);
};

test {
  t01: length_of [1, 2, 3] == 3;
  t02: mid(.list: [1, 2, 3]) == 1;
  t03: merge(.a: [3, 1], .b: [2, 4]) == [2, 3, 1, 4];
  t04: merge_sort(.list: empty [int]) == empty [int];
  t05: merge_sort(.list: [1]) == [1];
  t06: merge_sort(.list: [3, 5, 2, 4, 1, 6]) == [1, 2, 3, 4, 5, 6];
  t07: merge_sort(.list: [3, 4, 2, 5, 1]) == [1, 2, 3, 4, 5];
  t08: merge_sort(.list: [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5];
  t09: merge_sort(.list: [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6];
};


test {
  t1 : (([5, 4, 3, 2, 1] sorted_by lhs < rhs) == [1, 2, 3, 4, 5]);
  t2 : (([1, 2, 3, 4, 5] sorted_by lhs < rhs) == [1, 2, 3, 4, 5]);
  t3 : (([5, 1, 4, 2, 3] sorted_by lhs < rhs) == [1, 2, 3, 4, 5]);
};