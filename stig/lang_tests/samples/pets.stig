/* <stig/lang_tests/samples/pets.stig>
   The function return a human-readable string describing the result.
   If successful, the database is updated; if not, the database remains unchanged.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

package #1;

buy_pet =
  (('not enough cash'          if buyer.cash < pet.price else  /* fail: the buyer doesn't have enough cash */
      ('pet price has changed' if try_price < pet.price else  /* fail: the buyer isn't offering enough cash */
      (('success old_owner') effecting {
      	(*<[known pet.owner, 'apps', 'pets']>::(pet_user)).cash += try_price;
	(*<[known pet.owner, 'apps', 'pets']>::(pet_user)).pets -= {pet_id};
      } if ((old_owner is known) effecting {                                  /* cool, do the deal */
      	/* The buyer spends the cash and gets the pet. */
    	buyer.cash -= try_price;
    	buyer.pets |= {pet_id};
    	/* The pet changes hands and gets a price increase and cut of the deal. */
    	pet.owner <- buyer_id;
    	pet.price *= 1.1;
    	pet.cash  += try_price * 0.05;
    	/* If there was an old owner, he gets the money and loses the pet. */
     }) else 'success no previous owner')
  ))) where {
    /* We an object of this type to store information about each pets player. */
    pet_user is <{
      .owner: id?,  /* The id of the player's owner, if any. */
      .pets: {id},  /* The set of pets (by id) owned by this player.  This might be empty. */
      .price: real,  /* The current price of this player as a pet. */
      .cash: real    /* The player's current pets cash. */
    }>;
    /* This function has some parameters. */
    buyer_id  = given::(id);    /* The id of the player trying to buy the pet. */
    pet_id    = given::(id);    /* The id of the player being bought as a pet. */
    try_price = given::(real);   /* The price the buyer is offering. */
    /* Some reads from the database.
       We assume that a relevant pet_user objects can be found in a directory-like address of the form 'id/apps/pets'. */
    buyer     = *<[ buyer_id, 'apps', 'pets' ]>::(pet_user);
    pet       = *<[ pet_id, 'apps', 'pets' ]>::(pet_user);

    old_owner = ((*<[ known pet.owner, 'apps', 'pets' ]>::(pet_user?)) if pet.owner is known else unknown pet_user);
  };
