/* <stig/lang_tests/samples/time_pnt.stig>

   An implementation of time_pnt portion of Stig script.

   (this is going to go away soon and be absorbed into a general time sample)

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

package #1;

/*
  TimePnt
*/

/* whatever we call this will be a reserved keyword but this is the effect it would have */
time_pnt_obj is <{.year: int, .month: int, .hour: int, .minute: int, .second: int, .nanosecond:int, .utc_offset: int}>;

/*
  literal form

  fully written out ISO format date enclosed by curly braces.
  this form helps when a function takes a time_pnt as an argument
*/
time0 = {2012-05-17T18:29:12-08:00};
time1 = now; /* implicit function call */

/*
  constructor form

  thought about not having this syntax, but making it so that you have to do the cast from object to time_pnt all the time
  seemed kind of like not having syntax for int and making people cast from double to int if they want it...

  requirement:
  year: [1900:] month: [1:12] day: [1:31] hour: [0:23] minute: [0:59] second: [0:59] utc_offset: [-720:840]
  year = 1970 [month = 1 [day = 1 [hour = 0 [minute = 0 [second = 0]]]]] [utc_offset = 0]
*/
time3 = time_pnt(.year: 2012, .month: 5, .day: 17, .hour: 18, .minute: 29, .second: 12, .nanosecond:0, .utc_offset: -8 * 60);

/* object form */
time_obj_form = <{.year: 2010, .month: 5, .day: 17, .hour: 18, .minute: 29, .second: 12, .nanosecond:0, .utc_offset: -8 * 60}>;

/* fields must be a subset of the 7 above. safe construction off of an object. would catch misspellings and such */
/* time4 = time_pnt(*obj); */ /* TODO: uncomment once unrolled_call_args are implemented */

/* START

/*
  postfix cast

  from any object that has at least the year field. it ignores the extra fields that are not a part of time_pnt_obj,
  which means if a field is misspelt it will be ignored.
*/
time5 = time_obj_form as time_pnt;


/*
  the object fields have the same requirements as the requirement of the contructor form.
  for example, <{.year: int, .day: int}> is sort of ambiguous as to whether it is simply ignoring the month or
  it is the number of days into the year
*/
subset_time_pnt_obj = time0 as <{.year: int, .month: int, .day: int}>;

datetime_utc = time0 as time_pnt_obj; /* utc_offset will always be 0... */

/*
  function to be able to provide utc_offset
*/
datetime_sf = to_time_pnt_obj(.time_pnt: time2, .utc_offset: -8);

END */