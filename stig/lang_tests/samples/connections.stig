/* <stig/lang_tests/samples/connections.stig>

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

package #2;

add_user = ((true) effecting {
  new <['user', uid]> <- <[gender, birthdate, date_registered, last_login_date, cc_iso, state, zipcode, mobile_app_session_count, mobile_web_session_count, web_session_count, pets_purchases]>;
}) where {
  uid = given::(int);
  gender = given::(str);
  birthdate = given::(int);
  date_registered = given::(int);
  last_login_date = given::(int);
  cc_iso = given::(int);
  state = given::(str);
  zipcode = given::(str);
  mobile_app_session_count = given::(int);
  mobile_web_session_count = given::(int);
  web_session_count = given::(int);
  pets_purchases = given::(int);
};

add_connection = ((true) effecting {
  new <[from_uid, 'is_friend_of', to_uid]> <- date_made;
  new <[to_uid, 'is_friend_of', from_uid]> <- date_made;
}) where {
  from_uid = given::(int);
  to_uid = given::(int);
  date_made = given::(int);
};

send_message = ((true) effecting {
  new <[from_uid, 'sent_msg_to', message_id]> <- <[date_sent, to_uid]>;
  new <[to_uid, 'received_msg_from', message_id]> <- <[date_sent, from_uid]>;
}) where {
  from_uid = given::(int);
  to_uid = given::(int);
  date_sent = given::(int);
  message_id = given::(int);
};

read_message = ((true) effecting {
  new <[from_uid, 'message_was_read', message_id]> <- <[date_read, to_uid]>;
  new <[to_uid, 'read_message', message_id]> <- <[date_read, from_uid]>;
}) where {
  from_uid = given::(int);
  to_uid = given::(int);
  date_read = given::(int);
  message_id = given::(int);
};

friends_of = (keys (time_pnt) @ <[uid, 'is_friend_of', free::(int)]>) where {
  uid = given::(int);
};

canon_edge is <[int, int]>; /* assert lhs < rhs */

get_edge = ((<[edge.2, edge.0]> if (edge.0 > edge.2) else <[edge.0, edge.2]>)) where {
  edge = given::(<[int, str, int]>);
};

compute_local_cluster_coefficient = ((((2.0 * (existing_connections as real)) / (potential_connections)) if (potential_connections > 0.0) else 0.0)) where {
  uid = given::(int);
  friends = keys (time_pnt) @ <[uid, 'is_friend_of', free::(int)]>;
  friend_set = friends.2 as {int};
  friend_count = length_of(friend_set);
  friends_of_friends_edge_set = friends.2 reduce (start empty {canon_edge} | ((get_edge(.edge:friends_of(.uid:that) if that.2 in friend_set)) as {canon_edge}));
  existing_connections = length_of (friends_of_friends_edge_set);
  potential_connections = (friend_count * (friend_count - 1)) as real;
};

add_to_histogram = ((hist - spot) + new_val) where {
  hist = given::({int : int});
  pos = given::(int);
  spot = {pos};
  new_val = {pos : hist[pos] + 1};
};

starting_dict = { 0 : 0,
                  5 : 0,
                  10 : 0,
                  15 : 0,
                  20 : 0,
                  25 : 0,
                  30 : 0,
                  35 : 0,
                  40 : 0,
                  45 : 0,
                  50 : 0,
                  55 : 0,
                  60 : 0,
                  65 : 0,
                  70 : 0,
                  75 : 0,
                  80 : 0,
                  85 : 0,
                  90 : 0,
                  95 : 0,
                  100 : 0};

compute_local_cluster_coefficient_histogram = (cluster_seq reduce add_to_histogram(.hist:start starting_dict, .pos:round(.val:that))) where {
  user_seq = keys (<[str, time_pnt, time_pnt, int, str, str, bool, bool]>) @ <['user', free::(int)]>;
  cluster_seq = compute_local_cluster_coefficient(.uid:user_seq.1);
  round = ((((val * 100.0) as int) / 5) * 5) where {
    val = given::(real);
  };
};


/* Local Clustering c = 1 (http://en.wikipedia.org/wiki/Clustering_coefficient#Local_clustering_coefficient) */
with {
  <['user', 1]> <- <['M', now, now, 55, 'CA', '94111', true, true]>;

  <[1, 'is_friend_of', 2]> <- now;
  <[2, 'is_friend_of', 1]> <- now;
  <[1, 'is_friend_of', 3]> <- now;
  <[3, 'is_friend_of', 1]> <- now;
  <[1, 'is_friend_of', 4]> <- now;
  <[4, 'is_friend_of', 1]> <- now;

  <[2, 'is_friend_of', 3]> <- now;
  <[3, 'is_friend_of', 2]> <- now;
  <[2, 'is_friend_of', 4]> <- now;
  <[4, 'is_friend_of', 2]> <- now;

  <[3, 'is_friend_of', 4]> <- now;
  <[4, 'is_friend_of', 3]> <- now;
} test {
  t10: compute_local_cluster_coefficient(.uid:1) == 1.0;
  t20: compute_local_cluster_coefficient_histogram()[100] == 1;
};

/* Local Clustering c = 1/3 (http://en.wikipedia.org/wiki/Clustering_coefficient#Local_clustering_coefficient) */
with {
  <['user', 1]> <- <['M', now, now, 55, 'CA', '94111', true, true]>;

  <[1, 'is_friend_of', 2]> <- now;
  <[2, 'is_friend_of', 1]> <- now;
  <[1, 'is_friend_of', 3]> <- now;
  <[3, 'is_friend_of', 1]> <- now;
  <[1, 'is_friend_of', 4]> <- now;
  <[4, 'is_friend_of', 1]> <- now;

  <[3, 'is_friend_of', 4]> <- now;
  <[4, 'is_friend_of', 3]> <- now;
} test {
  t10: compute_local_cluster_coefficient(.uid:1) == (1.0 / 3.0);
  t20: compute_local_cluster_coefficient_histogram()[30] == 1;
};

/* Local Clustering c = 0 (http://en.wikipedia.org/wiki/Clustering_coefficient#Local_clustering_coefficient) */
with {
  <['user', 1]> <- <['M', now, now, 55, 'CA', '94111', true, true]>;

  <[1, 'is_friend_of', 2]> <- now;
  <[2, 'is_friend_of', 1]> <- now;
  <[1, 'is_friend_of', 3]> <- now;
  <[3, 'is_friend_of', 1]> <- now;
  <[1, 'is_friend_of', 4]> <- now;
  <[4, 'is_friend_of', 1]> <- now;
} test {
  t10: compute_local_cluster_coefficient(.uid:1) == 0.0;
  t20: compute_local_cluster_coefficient_histogram()[0] == 1;
};

/* test add_to_histogram */
with {} test {
  t100 : add_to_histogram(.hist:{0 : 0, 5 : 0}, .pos:0) == {0 : 1, 5 : 0};
};

/* test case with no friends */
with {
  <['user', 1]> <- <['M', now, now, 55, 'CA', '94111', true, true]>;

  <[1, 'is_friend_of', 2]> <- now;
  <[2, 'is_friend_of', 1]> <- now;
} test {
  tempty1: compute_local_cluster_coefficient(.uid:1) == 0.0;
  tempty2: compute_local_cluster_coefficient(.uid:3) == 0.0;
};