/* <stig/lang_tests/general/mutablefilter.stig>

   This Stig script contains an error case where you cannot filter values
   returned from dereferencing a set of keys directly.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

with {
  <["stuff", 1]> <- 3;
  <["stuff", 2]> <- 7;
  <["stuff", 3]> <- 10;
  <["stuff", 4]> <- 13;
  <["stuff", 5]> <- 17;
}
test {

  /* These two work just fine */
  t1: *(keys <["stuff", free::(int) ]>)::(int) as [int] == [3,7,10,13,17];
  t2: *(keys <["stuff", free::(int) ]> if (that.1 >= 4))::(int) as [int] == [13,17];

  /* This is the case that fails because we can't filter returned values */
  t3: ((*(keys <["stuff", free::(int)]>)::(int)) if (that > 4)) as [int] == [7,10,13,17];

  /* This works though -- even though literally it's just putting that "dereference these" call into a function */
  t4: (get_me_ints if (that > 4)) as [int] == [7,10,13,17];
};

get_me_ints = *(keys <["stuff", free::(int) ]>)::(int);