/* <stig/lang_tests/general/reduce.stig>

   This Stig script tests reduce expressions.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */


add = (x + y) where {
  x = given::(int);
  y = given::(int);
};

test {
  t1: ([1..5] reduce start 0 + that) == 15;
  t2: ([1..5) reduce start 0 + that) == 10;
  t3: ([1..5] reduce that + start 0) == 15;
  t4: ([1..5] reduce that + (start 0 + that)) == 30;
  t5: ((x reduce start 0 + that) == 15) where {
    x = [1..5];
  };
  t6: (([1..5] reduce start x + that) == 15) where {
    x = 0;
  };
  t7: ((x reduce start 0 + that) + 5 == 20) where {
    x = [1..5];
  };
  t8: (**[1, 2, 3, 4, 5] reduce start 0 + that) + 5 == 20;
  t9: ((**x reduce start 0 + that) + 5 == 20) where {
    x = [1, 2, 3, 4, 5];
  };
  t10: ((x reduce start 0.0 + that ** that) == 32.0) where {
    x = [1..3];
  };
  t11: [1..100] reduce start true;
  t12: ([1..100] reduce start 0) == 0;
  t13: (**empty [int] reduce start 42) == 42;
  t14: (**empty [int] reduce start 42 + that) == 42;
  t15: ((**empty [int] reduce start x) == x) where {
    x = 42;
  };
  t16: (**empty [int] reduce (start 42 if false else that)) == 42;
  t17: ([1..1000] reduce (start 42 if false else that)) == 1000;
  t18: (**empty [int] reduce start 42 + (32 if false else that)) > 0;

  /* test stride and open-endedness */
  t19: ([0,2..8] reduce start 0 + that) == 20;
  t20: ([0,2..8) reduce start 0 + that) == 12;
  t21: ([0,3..8] reduce start 0 + that) == 9;
  t22: ([0,3..8) reduce start 0 + that) == 9;
  t23: ([8,6..2] reduce start 0 + that) == 20;
  t24: ([8,6..2) reduce start 0 + that) == 18;
  t25: ([8,4..2] reduce start 0 + that) == 12;
  t26: ([8,4..2) reduce start 0 + that) == 12;
  t27: ([0,1..5] reduce start 0 + that) == 15;
  t28: ([0,1..5) reduce start 0 + that) == 10;
  t29: ([0..-5] reduce start 0 + that) == -15;
  t30: ([0..-5) reduce start 0 + that) == -10;
  t31: ([0,-1..-5] reduce start 0 + that) == -15;
  t32: ([0,-1..-5) reduce start 0 + that) == -10;
  t33: ([0,-2..-5] reduce start 0 + that) == -6;
  t34: ([0,-2..-5) reduce start 0 + that) == -6;
  t35: ([0,-2..-6] reduce start 0 + that) == -12;
  t36: ([0,-2..-6) reduce start 0 + that) == -6;

  /* test complex expressions in range constructs and start expressions */
  t37: ([add(.x: 0, .y: 1)..add(.x: 6, .y: -1)] reduce start 0 + that) == 15;
  t38: ([add(.x: 0, .y: 1)..add(.x: 6, .y: -1)] reduce start (add(.x: -3, .y: 2) + 1) + that) == 15;
  t39: ([add(.x: 0, .y: 1),add(.x: 1, .y: 1)..add(.x: 6, .y: -1)] reduce start (add(.x: -3, .y: 2) + 1) + that) == 15;
  t40: ([0,(add(.x: 3, .y: -2) + 1)..8] reduce start 0 + that) == 20;
};
