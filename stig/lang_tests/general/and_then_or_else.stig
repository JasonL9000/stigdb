/* <stig/lang_tests/general/and_then_or_else.stig>

   Tests and_then and or_else

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */


snr = ((r) effecting { *<[n]>::(bool) <- true; }) where { r = given::(bool); n = given::(int); };

with {
  <[0]> <- false;
  <[1]> <- false;
} test {
  t1: not (snr(.r: false, .n: 0) and_then snr(.r: true, .n: 1)) {
    t1s0: *<[0]>::(bool);
    t1s1: not *<[1]>::(bool);
  };
  t2: (snr(.r: true, .n: 0) and_then snr(.r: true, .n: 1)) {
    t2s0: *<[0]>::(bool);
    t2s1: *<[1]>::(bool);
  };
  t3: (snr(.r: true, .n: 0) or_else snr(.r: false, .n: 1)) {
    t3s0: *<[0]>::(bool);
    t3s1: not *<[1]>::(bool);
  };
  t4: not (snr(.r: false, .n: 0) or_else snr(.r: false, .n: 1)) {
    t4s0: *<[0]>::(bool);
    t4s1: *<[1]>::(bool);
  };
};

snr_opt = ((r) effecting { *<[n]>::(bool) <- true; }) where { r = given::(bool?); n = given::(int); };

/* true and false */
with {
  <[0]> <- false;
  <[1]> <- false;
} test {
  /* t5 through t8 are equivalent to t1 thorugh t4 except they are known opt values. */
  t1: (snr_opt(.r: false, .n: 0) and_then snr_opt(.r: true, .n: 1)) is known false {
    t5s0: *<[0]>::(bool);
    t5s1: not *<[1]>::(bool);
  };
  t2: (snr_opt(.r: true, .n: 0) and_then snr_opt(.r: true, .n: 1)) is known true {
    t6s0: *<[0]>::(bool);
    t6s1: *<[1]>::(bool);
  };
  t3: (snr_opt(.r: true, .n: 0) or_else snr_opt(.r: false, .n: 1)) is known true {
    t7s0: *<[0]>::(bool);
    t7s1: not *<[1]>::(bool);
  };
  t4: (snr_opt(.r: false, .n: 0) or_else snr_opt(.r: false, .n: 1)) is known false {
    t8s0: *<[0]>::(bool);
    t8s1: *<[1]>::(bool);
  };
};

/* More interesting ones involving unknowns. */

/* and_then with unknowns */
with {
  <[0]> <- false;
  <[1]> <- false;
} test {
  t1: (snr_opt(.r: unknown bool, .n: 0) and_then snr_opt(.r: true, .n: 1)) is unknown {
    t9s0: *<[0]>::(bool);
    t9s1: *<[1]>::(bool);
  };
  t2: (snr_opt(.r: unknown bool, .n: 0) and_then snr_opt(.r: false, .n: 1)) is known false {
    t10s0: *<[0]>::(bool);
    t10s1: *<[1]>::(bool);
  };
  t11: (snr_opt(.r: true, .n: 0) and_then snr_opt(.r: unknown bool, .n: 1)) is unknown {
    t11s0: *<[0]>::(bool);
    t11s1: *<[1]>::(bool);
  };
  t12: (snr_opt(.r: false, .n: 0) and_then snr_opt(.r: unknown bool, .n: 1)) is known false {
    t12s0: *<[0]>::(bool);
    t12s1: not *<[1]>::(bool);
  };
};

with {
  <[0]> <- false;
  <[1]> <- false;
} test {
  t1: (snr_opt(.r: unknown bool, .n: 0) or_else snr_opt(.r: true, .n: 1)) is known true {
    t9s0: *<[0]>::(bool);
    t9s1: *<[1]>::(bool);
  };
  t2: (snr_opt(.r: unknown bool, .n: 0) or_else snr_opt(.r: false, .n: 1)) is unknown {
    t10s0: *<[0]>::(bool);
    t10s1: *<[1]>::(bool);
  };
  t11: (snr_opt(.r: true, .n: 0) or_else snr_opt(.r: unknown bool, .n: 1)) is known true {
    t11s0: *<[0]>::(bool);
    t11s1: not *<[1]>::(bool);
  };
  t12: (snr_opt(.r: false, .n: 0) or_else snr_opt(.r: unknown bool, .n: 1)) is unknown {
    t12s0: *<[0]>::(bool);
    t12s1: *<[1]>::(bool);
  };
};

test {
  t1: not(false and_then (true) effecting { new <[0]> <- 0; }) {
    t1a: *<[0]>::(int?) is unknown;
  };
};
