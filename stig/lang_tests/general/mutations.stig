/* <stig/lang_tests/general/mutations.stig>

   This Stig script tests database updates (mutations).

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */


read_val = (*<[n]>::(int)) where {
  n = given::(int);
};

write_val = ((true) effecting {
  new <[n]> <- x;
} ) where {
  n = given::(int);
  x = given::(int);
};

increment_val = ((true) effecting {
  *<[n]>::(int) += x;
} ) where {
  n = given::(int);
  x = given::(int);
};

decrement_val = ((true) effecting {
  *<[n]>::(int) -= x;
} ) where {
  n = given::(int);
  x = given::(int);
};

multiply_val = ((true) effecting {
  *<[n]>::(int) *= x;
} ) where {
  n = given::(int);
  x = given::(int);
};

modulo_val = ((true) effecting {
  *<[n]>::(int) %= x;
} ) where {
  n = given::(int);
  x = given::(int);
};

write_real = ((true) effecting {
  new <[n]> <- [x];
}) where {
  n = given::(int);
  x = given::(real);
};

read_real = (*<[n]>::(real)) where {
  n = given::(int);
};

divide_real = ((true) effecting {
  *<[n]>::(real) /= x;
}) where {
  n = given::(int);
  x = given::(real);
};

exp_real = ((true) effecting {
  *<[n]>::(real) **= x;
}) where {
  n = given::(int);
  x = given::(real);
};

write_list = ((true) effecting {
  new <[n]> <- [x];
} ) where {
  n = given::(int);
  x = given::(int);
};

read_list = (*<[n]>::([int])) where {
  n = given::(int);
};

append_list = ((true) effecting {
  *<[n]>::([int]) += [x];
} ) where {
  n = given::(int);
  x = given::(int);
};

write_set = ((true) effecting {
  new <[n]> <- {x};
} ) where {
  n = given::(int);
  x = given::(int);
};

read_set = (*<[n]>::({int})) where {
  n = given::(int);
};

union_set = ((true) effecting {
  *<[n]>::({int}) |= {x};
} ) where {
  n = given::(int);
  x = given::(int);
};

intersect_set = ((true) effecting {
  *<[n]>::({int}) &= {x};
} ) where {
  n = given::(int);
  x = given::(int);
};

write_bool = ((true) effecting {
  new <[n]> <- x;
}) where {
  n = given::(int);
  x = given::(bool);
};

read_bool = (*<[n]>::(bool)) where {
  n = given::(int);
};

and_bool = ((true) effecting {
  *<[n]>::(bool) and= x;
}) where {
  n = given::(int);
  x = given::(bool);
};

or_bool = ((true) effecting {
  *<[n]>::(bool) or= x;
}) where {
  n = given::(int);
  x = given::(bool);
};

xor_bool = ((true) effecting {
  *<[n]>::(bool) xor= x;
}) where {
  n = given::(int);
  x = given::(bool);
};

write_dic = ((true) effecting {
  new <[n]> <- x;
} ) where {
  n = given::(int);
  x = given::({int:real});
};

read_dic = (*<[n]>::({int:real})) where {
  n = given::(int);
};

join_dic = ((true) effecting {
  *<[n]>::({int:real}) += x;
} ) where {
  n = given::(int);
  x = given::({int:real});
};

scour_dic = ((true) effecting {
  *<[n]>::({int:real}) -= x;
} ) where {
  n = given::(int);
  x = given::({int});
};



/* mutating simple integers */
with {
  <[0]> <- 1;
  <[1]> <- 0;
} test {
  t1: read_val(.n: 0) == 1 { t1s1: read_val(.n: 0) == 1; t1s2:read_val(.n: 1) == 0; };
  t2: read_val(.n: 1) == 0 { t2s1: read_val(.n: 0) == 1; t2s2: read_val(.n: 1) == 0; };
  t3: write_val(.n: 0, .x: 1000) {
    t4: read_val(.n: 0) == 1000;
    t5: read_val(.n: 1) == 0;
  };
  t6: increment_val(.n: 0, .x: 41) {
    t7: read_val(.n: 0) == 42;
    t8: read_val(.n: 1) == 0;
    t9: decrement_val(.n: 0, .x: 29) {
      t10: read_val(.n: 0) == 13;
      t11: read_val(.n: 1) == 0;
    };
    t12: multiply_val(.n: 0, .x: 3) {
      t13: read_val(.n: 0) == 126;
      t14: read_val(.n: 1) == 0;
    };
    t15: modulo_val(.n: 0, .x: 3) {
      t16: read_val(.n: 0) == 0;
      t17: read_val(.n: 1) == 0;
    };
  };
  t18: write_val(.n: 2, .x: 15) {
    t19: read_val(.n: 0) == 1;
    t20: read_val(.n: 1) == 0;
    t21: read_val(.n: 2) == 15;
  };
};

/* mutating reals */
with {
  <[0]> <- 1.0;
  <[1]> <- 2.0;
} test {
  t83: read_real(.n: 0) == 1.0;
  t84: read_real(.n: 1) == 2.0;
  t85: divide_real(.n: 0, .x: 0.25) {
    t86: read_real(.n: 0) == 4.0;
    t87: read_real(.n: 1) == 2.0;
  };
  t88: exp_real(.n: 0, .x: 2.0) {
    t89: read_real(.n: 0) == 1.0;
    t90: read_real(.n: 1) == 2.0;
    t91: exp_real(.n: 1, .x: 3.0) {
      t92: read_real(.n: 0) == 1.0;
      t93: read_real(.n: 1) == 8.0;
    };
    t94: exp_real(.n: 1, .x: 0.5) {
      t95: read_real(.n: 0) == 1.0;
      t96: (x > 1.414 and x < 1.415) where {
        x = read_real(.n: 1);
      };
    };
  };
};

/* mutating bools */
with {
  <[0]> <- false;
  <[1]> <- true;
} test {
  t98: read_bool(.n: 0) == false;
  t99: read_bool(.n: 1) == true;
  t100: write_bool(.n: 0, .x: true) {
    t101: read_bool(.n: 0) == true;
    t102: read_bool(.n: 1) == true;
    t103: write_bool(.n: 1, .x: false) {
      t104: read_bool(.n: 0) == true;
      t105: read_bool(.n: 1) == false;
    };
  };

  t106: and_bool(.n: 0, .x: false) {
    t107: read_bool(.n: 0) == false;
    t108: read_bool(.n: 1) == true;
  };
  t109: and_bool(.n: 0, .x: true) {
    t110: read_bool(.n: 0) == false;
    t111: read_bool(.n: 1) == true;
  };
  t112: and_bool(.n: 1, .x: false) {
    t113: read_bool(.n: 0) == false;
    t114: read_bool(.n: 1) == false;
  };
  t115: and_bool(.n: 1, .x: true) {
    t116: read_bool(.n: 0) == false;
    t117: read_bool(.n: 1) == true;
  };

  t118: or_bool(.n: 0, .x: false) {
    t119: read_bool(.n: 0) == false;
    t120: read_bool(.n: 1) == true;
  };
  t121: or_bool(.n: 0, .x: true) {
    t122: read_bool(.n: 0) == true;
    t123: read_bool(.n: 1) == true;
  };
  t124: or_bool(.n: 1, .x: false) {
    t125: read_bool(.n: 0) == false;
    t126: read_bool(.n: 1) == true;
  };
  t127: or_bool(.n: 1, .x: true) {
    t128: read_bool(.n: 0) == false;
    t129: read_bool(.n: 1) == true;
  };

  t130: xor_bool(.n: 0, .x: false) {
    t131: read_bool(.n: 0) == false;
    t132: read_bool(.n: 1) == true;
  };
  t133: xor_bool(.n: 0, .x: true) {
    t134: read_bool(.n: 0) == true;
    t135: read_bool(.n: 1) == true;
  };
  t136: xor_bool(.n: 1, .x: false) {
    t137: read_bool(.n: 0) == false;
    t138: read_bool(.n: 1) == true;
  };
  t139: xor_bool(.n: 1, .x: true) {
    t140: read_bool(.n: 0) == false;
    t141: read_bool(.n: 1) == false;
  };

};

/* mutating lists */
with {
  <[0]> <- empty [int];
  <[1]> <- [1];
} test {
  t142: read_list(.n: 0) is empty;
  t143: read_list(.n: 1) == [1];
  t144: write_list(.n: 0, .x: 42) {
    t145: read_list(.n: 0) == [42];
    t146: read_list(.n: 1) == [1];
  };
  t147: append_list(.n: 0, .x: 1) {
    t148: read_list(.n: 0) == [1];
    t149: read_list(.n: 1) == [1];
    t150: append_list(.n: 0, .x: 1) {
      t151: read_list(.n: 0) == [1, 1];
      t152: read_list(.n: 1) == [1];
      t153: append_list(.n: 1, .x: 2) {
        t154: read_list(.n: 0) == [1, 1];
        t155: read_list(.n: 1) == [1, 2];
      };
    };
  };
};

/* mutating sets */
with {
  <[0]> <- empty {int};
  <[1]> <- {1};
} test {
  t156: read_set(.n: 0) is empty;
  t157: read_set(.n: 1) == {1};
  t158: write_set(.n: 0, .x: 42) {
    t159: read_set(.n: 0) == {42};
    t160: read_set(.n: 1) == {1};
  };
  t161: write_set(.n: 1, .x: 42) {
    t162: read_set(.n: 0) is empty;
    t163: read_set(.n: 1) == {42};
  };
  t164: union_set(.n: 0, .x: 42) {
    t165: read_set(.n: 0) == {42};
    t166: read_set(.n: 1) == {1};
    t167: union_set(.n: 0, .x: 22) {
      t168: read_set(.n: 0) == {22, 42};
      t169: read_set(.n: 1) == {1};
      t170: union_set(.n: 0, .x: 22) {
        t171: read_set(.n: 0) == {22, 42};
        t172: read_set(.n: 1) == {1};
      };
      t173: union_set(.n: 1, .x: 13) {
        t174: read_set(.n: 0) == {22, 42};
        t175: read_set(.n: 1) == {1, 13};
      };
    };
  };
  t176: intersect_set(.n: 0, .x: 42) {
    t177: read_set(.n: 0) is empty;
    t178: read_set(.n: 1) == {1};
  };
  t179: intersect_set(.n: 1, .x: 13) {
    t180: read_set(.n: 0) is empty;
    t181: read_set(.n: 1) is empty;
  };
  t182: union_set(.n: 1, .x: 23) {
    t183: read_set(.n: 0) is empty;
    t184: read_set(.n: 1) == {1, 23};
    t185: intersect_set(.n: 1, .x: 23) {
      t186: read_set(.n: 0) is empty;
      t187: read_set(.n: 1) == {23};
    };
  };
};

/* mutating dics */
with {
  <[0]> <- empty {int:real};
  <[1]> <- {1:1.0};
} test {
  td1: read_dic(.n: 0) is empty;
  td2: read_dic(.n: 1) == {1:1.0};
  td3: join_dic(.n: 0, .x: {1:1.0}) {
    td3s1: read_dic(.n: 0) == read_dic(.n: 1);
    td3s2: join_dic(.n: 1, .x: {2:2.0, 3:3.0, 1:1.0}) {
      td3s2s1: read_dic(.n: 0) == {1:1.0};
      td3s2s2: read_dic(.n: 1) == {1:1.0, 2:2.0, 3:3.0};
      td3s2s3: join_dic(.n: 0, .x: read_dic(.n: 1)) {
        td3s2s3s1: read_dic(.n: 0) == {1:1.0, 2:2.0, 3:3.0};
        td3s2s3s2: read_dic(.n: 1) == {1:1.0, 2:2.0, 3:3.0};
        tdsub1: scour_dic(.n: 1, .x: {2}) {
          tdsub1s1: read_dic(.n: 0) == {1:1.0, 2:2.0, 3:3.0};
          tdsub1s2: read_dic(.n: 1) == {1:1.0, 3:3.0};
        };
        tdsub2: scour_dic(.n: 0, .x: {2}) {
          tdsub2s1: read_dic(.n: 0) == {1:1.0, 3:3.0};
          tdsub2s2: read_dic(.n: 1) == {1:1.0, 2:2.0, 3:3.0};
        };
        tdsub3: scour_dic(.n: 1, .x: {2, 4}) {
          tdsub3s1: read_dic(.n: 1) == {1:1.0, 3:3.0};
          tdsub3s2 : scour_dic(.n: 0, .x: {2, 4}) {
            tdsub3s1s2: read_dic(.n: 0) == {1:1.0, 3:3.0};
            tdsub3s1s1: read_dic(.n: 0) == read_dic(.n: 1);
         };
        };
        tdsub4: scour_dic(.n: 1, .x: empty {int}) {
          tdsub4s1: read_dic(.n: 0) == {1:1.0, 2:2.0, 3:3.0};
          tdsub4s2: read_dic(.n: 1) == {1:1.0, 2:2.0, 3:3.0};
        };
      };
    };
  };
  td4: write_dic(.n: 0, .x: {22:42.0}) {
    td4s1: read_dic(.n: 0) == {22:42.0};
    td4s2: read_dic(.n: 1) == {1:1.0};
    td4s3: write_dic(.n: 1, .x: empty {int:real}) {
      td4s3s1: read_dic(.n: 0) == {22:42.0};
      td4s3s2: read_dic(.n: 1) is empty;
    };
  };
};

/* new, delete, "maybe" */
with {
  <[0]> <- 0;
} test {
  tnd1: *<[0]>::(int) == 0;
  tnd2: (true) effecting { new <[0]> <- 1; } {
    tnd2s: *<[0]>::(int) == 1;
  };
  tnd3: (true) effecting { new <[0]> <- [2.71, 3.14]; } {
    tnd3s: *<[0]>::([real]) == [2.71, 3.14];
  };
  tnd4: (true) effecting { new <[1]> <- 1; } {
    tnd4s1: *<[0]>::(int) == 0;
    tnd4s2: *<[1]>::(int) == 1;
    tnd4s3: (true) effecting { delete (int) @ <[0]>; } {
      tnd4s3s1: *<[0]>::(int?) is unknown;
      tnd4s3s2: &(*<[0]>::(int?)) is unknown;
      tnd4s3s3: *<[1]>::(int) == 1;
    };
    tnd4s4: ((true) effecting { delete (int) @ &x; }) where { x = *<[0]>::(int?); } {
      tnd4s4s1: *<[0]>::(int?) is unknown;
      tnd4s4s2: &(*<[0]>::(int?)) is unknown;
      tnd4s4s3: *<[1]>::(int) == 1;
    };
    tnd4s5: ((true) effecting { delete (int) @ &x; }) where { x = *<[1]>::(int?); } {
      tnd4s5s1: *<[0]>::(int) == 0;
      tnd4s5s2: *<[1]>::(int?) is unknown;
      tnd4s5s3: &(*<[1]>::(int?)) is unknown;
    };
  };
  tnd5: *<[1]>::(int?) is unknown;
  tnd6: &(*<[1]>::(int?)) is unknown;

  tmaybe1: (*<[0]>::(int?) == 0) is known true;
  tmaybe2: (*<[1]>::(int?) == 1) is unknown;
  tmaybe3: *<[2]>::(int?) is unknown;
  tmaybe4: (true) effecting { new <[2]> <- 2; } {
    tmaybe4s1: (*<[2]>::(int?) == 2) is known true;
    tmaybe4s2: *<[2]>::(int) == 2;
   };
};
