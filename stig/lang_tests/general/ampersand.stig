/* <stig/lang_tests/general/ampersand.stig>

   This Stig script tests the address-of operator (&).  Specifically, it
   ensures that the compiler produces correct addresses (known or unknown?).

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */


with {
  <[0]> <- 1;
  <[1]> <- 1.0;
  <[2]> <- "foo";
  <[3]> <- true;
  <[4]> <- [1, 2, 3];
  <[5]> <- {1};
  <[6]> <- {1:1.0};
  <[7]> <- <[1]>;
  <[8]> <- <{.a: 1}>;
} test {
  /* TODO: Unsupported: Mutables in sequences, lists.
  taddrunknown59: (*<[4]>::([int]) sorted_by ((lhs < rhs) if (&lhs is unknown) else (rhs > lhs))) == [1, 2, 3];
  taddrunknown60: (*<[4]>::([int]) sorted_by ((lhs < rhs) if (&rhs is unknown) else (rhs > lhs))) == [1, 2, 3];
  taddrunknown61: &(**(*<[4]>::([int])) reduce start 0 + that) is unknown;
  taddrunknown62: (**(*<[4]>::([int])) reduce start 0 + (0 if (&that is unknown) else 1)) == 0;
  taddrunknown63: (**(*<[4]>::([int])) reduce (0 if (&(start 0) is unknown) else 1)) == 0;
  taddrunknown64: &(**(*<[4]>::([int])) if true) is unknown as [bool] == [true, true, true];
  */
  taddrunknown65: &(*<[4]>::([int])[0]) is known;
/* TODO: Uncomment once maintaining mutability through a slice is supported.
  taddrunknown66: &(*<[4]>::([int])[0:]) is known;
  taddrunknown67: &(*<[4]>::([int])[0:1]) is known;
  taddrunknown68: &(*<[4]>::([int])[:1]) is known;
*/

  taddrunknown75: &(*<[6]>::({int:real})[1]) is known;
  taddrunknown82: &(*<[7]>::(<[int]>).0) is known;
  taddrunknown83: &(*<[8]>::(<{.a: int}>).a) is known;
  /* address-of operations that should yield known addresses */
  taddrknown1: (known &*<[0]>::(int)) == <[0]>;
  taddrknown2: (known &(*<[0]>::(int))) == <[0]>;
  taddrknown3: (known &((*<[0]>::(int)) assert { that >= 0; })) == <[0]>;
  taddrknown4: (known &((*<[0]>::(int)) effecting { new <["foo"]> <- true; })) == <[0]>;
  taddrknown5: (known &((*<[0]>::(int)) effecting { delete (bool) @ <["foo"]>; })) == <[0]>;
  /* TODO Test known addresses passed through function calls once they're implemented properly */
  taddrknown6: ((known &x) == <[0]>) where { x = *<[0]>::(int); };
};
