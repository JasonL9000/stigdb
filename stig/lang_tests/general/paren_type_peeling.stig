/* <stig/lang_tests/general/paren_type_peeling.stig>

   This Stig script tests peeling parentheses off of types.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */


list is [int];
set is {int};
dic is {int:real};
plist is (list);

list_of_list is [list];
list_of_set is [set];

test {
  /*** empty ***/
  /* using naked types */
  t1: (empty [int]) is empty;
  t2: (empty {int}) is empty;
  t3: (empty {int:real}) is empty;
  t4: (empty ([int])) is empty;
  t5: (empty ({int})) is empty;
  t6: (empty ({int:real})) is empty;
  t7: (empty (([int]))) is empty;
  t8: (empty (({int}))) is empty;
  t9: (empty (({int:real}))) is empty;

  /* using references/aliases */
  t10: (empty list) is empty;
  t11: (empty set) is empty;
  t12: (empty dic) is empty;
  t13: (empty (list)) is empty;
  t14: (empty (set)) is empty;
  t15: (empty (dic)) is empty;
  t16: (empty ((list))) is empty;
  t17: (empty ((set))) is empty;
  t18: (empty ((dic))) is empty;
  temptyplist: (empty plist) is empty;

  /*** unknown ***/
  /* using naked types */
  t19: (unknown [int]) is unknown;
  t20: (unknown {int}) is unknown;
  t21: (unknown {int:real}) is unknown;
  t22: (unknown ([int])) is unknown;
  t23: (unknown ({int})) is unknown;
  t24: (unknown ({int:real})) is unknown;
  t25: (unknown (([int]))) is unknown;
  t26: (unknown (({int}))) is unknown;
  t27: (unknown (({int:real}))) is unknown;

  /* using references/aliases */
  t28: (unknown list) is unknown;
  t29: (unknown set) is unknown;
  t30: (unknown dic) is unknown;
  t31: (unknown (list)) is unknown;
  t32: (unknown (set)) is unknown;
  t33: (unknown (dic)) is unknown;
  t34: (unknown ((list))) is unknown;
  t35: (unknown ((set))) is unknown;
  t36: (unknown ((dic))) is unknown;
  tunknownplist: (unknown plist) is unknown;

  /*** given ***/
  /* using naked types */
  t37: (f(.x: empty [int]) is empty) where { f = (x) where { x = given::([int]); }; };
  t38: (f(.x: empty {int}) is empty) where { f = (x) where { x = given::({int}); }; };
  t39: (f(.x: empty {int:real}) is empty) where { f = (x) where { x = given::({int:real}); }; };
  t40: (f(.x: empty [int]) is empty) where { f = (x) where { x = given::(([int])); }; };
  t41: (f(.x: empty {int}) is empty) where { f = (x) where { x = given::(({int})); }; };
  t42: (f(.x: empty {int:real}) is empty) where { f = (x) where { x = given::(({int:real})); }; };
  t43: (f(.x: empty [int]) is empty) where { f = (x) where { x = given::([int]); }; };
  t44: (f(.x: empty {int}) is empty) where { f = (x) where { x = given::({int}); }; };
  t45: (f(.x: empty {int:real}) is empty) where { f = (x) where { x = given::({int:real}); }; };
  t46: (f(.x: empty [int]) is empty) where { f = (x) where { x = given::((([int]))); }; };
  t47: (f(.x: empty {int}) is empty) where { f = (x) where { x = given::((({int}))); }; };
  t48: (f(.x: empty {int:real}) is empty) where { f = (x) where { x = given::((({int:real}))); }; };

  /* using references/aliases */
  t49: (f(.x: empty [int]) is empty) where { f = (x) where { x = given::(list); }; };
  t50: (f(.x: empty {int}) is empty) where { f = (x) where { x = given::(set); }; };
  t51: (f(.x: empty {int:real}) is empty) where { f = (x) where { x = given::(dic); }; };
  t52: (f(.x: empty [int]) is empty) where { f = (x) where { x = given::((list)); }; };
  t53: (f(.x: empty {int}) is empty) where { f = (x) where { x = given::((set)); }; };
  t54: (f(.x: empty {int:real}) is empty) where { f = (x) where { x = given::((dic)); }; };
  t55: (f(.x: empty [int]) is empty) where { f = (x) where { x = given::(list); }; };
  t56: (f(.x: empty {int}) is empty) where { f = (x) where { x = given::(set); }; };
  t57: (f(.x: empty {int:real}) is empty) where { f = (x) where { x = given::(dic); }; };
  t58: (f(.x: empty [int]) is empty) where { f = (x) where { x = given::(((list))); }; };
  t59: (f(.x: empty {int}) is empty) where { f = (x) where { x = given::(((set))); }; };
  t60: (f(.x: empty {int:real}) is empty) where { f = (x) where { x = given::(((dic))); }; };
  tgivenplist: (f(.x: empty [int]) is empty) where { f = (x) where { x = given::(plist); }; };

  /*** as ***/
  /* using naked types */
  tas1: ([1, 2, 3] as [int]) == [1, 2, 3];
  tas2: ({1, 2, 3} as {int}) == {1, 2, 3};
  tas3: ({1:1.0, 2:2.0, 3:3.0} as {int:real}) == {1:1.0, 2:2.0, 3:3.0};
  tas4: ([1, 2, 3] as ([int])) == [1, 2, 3];
  tas5: ({1, 2, 3} as ({int})) == {1, 2, 3};
  tas6: ({1:1.0, 2:2.0, 3:3.0} as ({int:real})) == {1:1.0, 2:2.0, 3:3.0};
  tas7: ([1, 2, 3] as (([int]))) == [1, 2, 3];
  tas8: ({1, 2, 3} as (({int}))) == {1, 2, 3};
  tas9: ({1:1.0, 2:2.0, 3:3.0} as (({int:real}))) == {1:1.0, 2:2.0, 3:3.0};

  /* using references/aliases */
  tas10: ([1, 2, 3] as list) == [1, 2, 3];
  tas11: ({1, 2, 3} as set) == {1, 2, 3};
  tas12: ({1:1.0, 2:2.0, 3:3.0} as dic) == {1:1.0, 2:2.0, 3:3.0};
  tas13: ([1, 2, 3] as (list)) == [1, 2, 3];
  tas14: ({1, 2, 3} as (set)) == {1, 2, 3};
  tas15: ({1:1.0, 2:2.0, 3:3.0} as (dic)) == {1:1.0, 2:2.0, 3:3.0};
  tas16: ([1, 2, 3] as ((list))) == [1, 2, 3];
  tas17: ({1, 2, 3} as ((set))) == {1, 2, 3};
  tas18: ({1:1.0, 2:2.0, 3:3.0} as ((dic))) == {1:1.0, 2:2.0, 3:3.0};
  tasplist: ([1, 2, 3] as plist) == [1, 2, 3];
};

/*** read ***/
with {
  <[0]> <- [1, 2, 3];
  <[1]> <- {1, 2, 3};
  <[2]> <- {1:1.0, 2:2.0, 3:3.0};
} test {
  /* using naked types */
  tread1: *<[0]>::([int]) == [1, 2, 3];
  tread2: *<[1]>::({int}) == {1, 2, 3};
  tread3: *<[2]>::({int:real}) == {1:1.0, 2:2.0, 3:3.0};
  tread4: *<[0]>::(([int])) == [1, 2, 3];
  tread5: *<[1]>::(({int})) == {1, 2, 3};
  tread6: *<[2]>::(({int:real})) == {1:1.0, 2:2.0, 3:3.0};
  tread7: *<[0]>::((([int]))) == [1, 2, 3];
  tread8: *<[1]>::((({int}))) == {1, 2, 3};
  tread9: *<[2]>::((({int:real}))) == {1:1.0, 2:2.0, 3:3.0};

  /* using references/aliases */
  tread10: *<[0]>::(list) == [1, 2, 3];
  tread11: *<[1]>::(set) == {1, 2, 3};
  tread12: *<[2]>::(dic) == {1:1.0, 2:2.0, 3:3.0};
  tread13: *<[0]>::((list)) == [1, 2, 3];
  tread14: *<[1]>::((set)) == {1, 2, 3};
  tread15: *<[2]>::((dic)) == {1:1.0, 2:2.0, 3:3.0};
  tread16: *<[0]>::(((list))) == [1, 2, 3];
  tread17: *<[1]>::(((set))) == {1, 2, 3};
  tread18: *<[2]>::(((dic))) == {1:1.0, 2:2.0, 3:3.0};
  treadplist: *<[0]>::(plist) == [1, 2, 3];
};

/*** free ***/
with {
  <[0, [1, 2]]> <- [[1]];
  <[0, [1, 3]]> <- [[2]];
  <[0, [2, 1]]> <- [[3]];
} test {
  /* using naked types */
  tfree1: (keys ([[int]]) @ <[0, free::([int])]> reduce start empty list_of_list + *that::([[int]])) == [[1], [2], [3]];
  tfree3: (keys ([[int]]) @ <[0, free::(([int]))]> reduce start empty list_of_list + *that::([[int]])) == [[1], [2], [3]];
  tfree5: (keys ([[int]]) @ <[0, free::((([int])))]> reduce start empty list_of_list + *that::([[int]])) == [[1], [2], [3]];

  /* using references/aliases */
  tfree7: (keys ([[int]]) @ <[0, free::(list)]> reduce start empty list_of_list + *that::(list_of_list)) == [[1], [2], [3]];
  tfree9: (keys ([[int]]) @ <[0, free::((list))]> reduce start empty list_of_list + *that::(list_of_list)) == [[1], [2], [3]];
  tfree11: (keys ([[int]]) @ <[0, free::(((list)))]> reduce start empty list_of_list + *that::(list_of_list)) == [[1], [2], [3]];
  tfreeplist: (keys ([[int]]) @ <[0, free::(plist)]> reduce start empty list_of_list + *that::(list_of_list)) == [[1], [2], [3]];
};
