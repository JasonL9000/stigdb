/* <stig/lang_tests/general/known.stig>

   This Stig script tests known and unknown values and their operations.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */


test {
  /* test "is known" and "is unknown" */
  t1: (unknown int) is unknown;
  t2: (unknown real) is unknown;
  t3: (unknown str) is unknown;
  t4: (unknown id) is unknown;
  t5: not ((unknown int) is known);
  t6: (true as bool?) is known;
  t7: (false as bool?) is known;
  t8: (unknown bool) is unknown;
  t9: (true as bool?) is known true;
  t11: not ((true as bool?) is known false);
  t12: (false as bool?) is known false;
  t13: not ((false as bool?) is known true);
  t14: not ((unknown bool) is known true);
  t15: not ((unknown bool) is known false);

  toptint: (1 as int?) is known;

  /* prefix "known" works for primitives */
  tknown1: known (true as bool?) == true;
  tknown2: known (false as bool?) == false;
  tknown3: known (1 as int?) == 1;
  tknown4: known (3.14 as real?) == 3.14;
  tknown5: known ("foo" as str?) == "foo";
  tknown6: known ([1, 2, 3] as [int]?) == [1, 2, 3];
  tknown7: known ({1, 2, 3} as {int}?) == {1, 2, 3};
  tknown8: known ({1:true, 2:false, 3:true} as {int:bool}?) == {1:true, 2:false, 3:true};
  tknown9: known (<[1, 2, 3]> as <[int, int, int]>?) == <[1, 2, 3]>;
  tknown10: known (<{.a: 1, .b: 2, .c: 3}> as <{.a: int, .b: int, .c: int}>?) == <{.a: 1, .b: 2, .c: 3}>;

  /* prefix "known" works within various blocks */
  tknownblock1: (x xor known y) where { x = known (true as bool?); y = false as bool?; };
  tknownblock2: not known ((false as bool?) assert { not (known that); });
  tknownblock3: not known ((false as bool?) effecting {
    new (known (<[known (0 as int?)]> as <[int]>?)) <- known (true as bool?);
  });
};

/* prefix "known" works within "with" blocks */
with {
  known (<[0]> as <[int]>?) <- known ([1, 2, 3] as [int]?);
} test {
  tknowninwith: *known (<[known (0 as int?)]> as <[int]>?)::([int]) == known ([1, 2, 3] as [int]?);
};
