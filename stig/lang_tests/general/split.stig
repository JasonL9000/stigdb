/* <stig/lang_tests/general/split.stig>

   Tests the "split" keyword in Stig.

   Copyright 2010-2014 Stig LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

/* takes in text and a regex to split on and returns a list of the split strings */
list_of_splits = ((text split reg).0 as [str]) where {
  text = given::(str);
  reg = given::(str);
};

list_of_matches = ((text split reg).1 as [str?]) where {
  text = given::(str);
  reg = given::(str);
};

my_greeting = "hello mpark!" + "hello jason!" + "helllllo tidder!" + "hellllloooo nurse!";
my_func = "hel+o+";

test {
  /* fairly "straightforward" splits -- just the split parts */
 t1: list_of_splits (.text:"a:b:c", .reg:":") == ["a", "b", "c"];
 t2: list_of_splits (.text:my_greeting, .reg:my_func) == ["", " mpark!", " jason!", " tidder!", " nurse!"];

  /* looking at the matched delims gets complex thanks to some current wonky stuff in optionals
     maybe we'll rewrite some of these later */
 t1a: ((list_of_matches (.text:"a:b:c", .reg:":"))[:2] == [":", ":"]) is known true;
 t1b: ((list_of_matches (.text:"a:b:c", .reg:":"))[2] == (unknown str)) is unknown;
 t2a: ((list_of_matches (.text:my_greeting, .reg:my_func))[:4] == ["hello", "hello", "helllllo", "hellllloooo"]) is known true;
 t2b: ((list_of_matches (.text:my_greeting, .reg:my_func))[4] == (unknown str)) is unknown;

 t3: ("A:B:C" split ":").0 as [str] == ["A", "B", "C"];
 t4: (("A:B:C" split ":").0 as [str])[0] == "A";
 t5: ((("A:B:C" split ":").1 as [str?])[0] == ":") is known true;
 t6: ((("A:B:C" split ":").1 as [str?])[2] == (unknown str)) is unknown;
};